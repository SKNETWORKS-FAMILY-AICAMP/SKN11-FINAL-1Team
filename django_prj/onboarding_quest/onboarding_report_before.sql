--
-- PostgreSQL database dump
--

-- Dumped from database version 17.5
-- Dumped by pg_dump version 17.5

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO postgres;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO postgres;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO postgres;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_alarm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_alarm (
    id integer NOT NULL,
    message text NOT NULL,
    created_at timestamp with time zone,
    is_active boolean NOT NULL,
    url_link character varying(200),
    user_id integer NOT NULL
);


ALTER TABLE public.core_alarm OWNER TO postgres;

--
-- Name: core_alarm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_alarm ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_alarm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_chatmessage; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_chatmessage (
    message_id integer NOT NULL,
    message_type character varying(10) NOT NULL,
    message_text text,
    create_time timestamp with time zone,
    is_active boolean NOT NULL,
    session_id integer NOT NULL
);


ALTER TABLE public.core_chatmessage OWNER TO postgres;

--
-- Name: core_chatmessage_message_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_chatmessage ALTER COLUMN message_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_chatmessage_message_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_chatsession; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_chatsession (
    session_id integer NOT NULL,
    summary character varying(255),
    is_active boolean NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.core_chatsession OWNER TO postgres;

--
-- Name: core_chatsession_session_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_chatsession ALTER COLUMN session_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_chatsession_session_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_company; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_company (
    company_id character varying(12) NOT NULL,
    company_name character varying(255) NOT NULL
);


ALTER TABLE public.core_company OWNER TO postgres;

--
-- Name: core_curriculum; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_curriculum (
    curriculum_id integer NOT NULL,
    curriculum_description text,
    curriculum_title character varying(255) NOT NULL,
    common boolean NOT NULL,
    total_weeks integer NOT NULL,
    week_schedule text,
    department_id integer
);


ALTER TABLE public.core_curriculum OWNER TO postgres;

--
-- Name: core_curriculum_curriculum_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_curriculum ALTER COLUMN curriculum_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_curriculum_curriculum_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_department; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_department (
    department_id integer NOT NULL,
    department_name character varying(50) NOT NULL,
    description character varying(255),
    is_active boolean NOT NULL,
    company_id character varying(12)
);


ALTER TABLE public.core_department OWNER TO postgres;

--
-- Name: core_department_department_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_department ALTER COLUMN department_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_department_department_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_docs; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_docs (
    docs_id integer NOT NULL,
    title character varying(255) NOT NULL,
    description character varying(255),
    file_path character varying(255) NOT NULL,
    create_time timestamp with time zone NOT NULL,
    common_doc boolean NOT NULL,
    original_file_name character varying(255),
    department_id integer NOT NULL
);


ALTER TABLE public.core_docs OWNER TO postgres;

--
-- Name: core_docs_docs_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_docs ALTER COLUMN docs_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_docs_docs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_emailconfig; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_emailconfig (
    id integer NOT NULL,
    email character varying(254) NOT NULL,
    password character varying(255) NOT NULL,
    name character varying(100) NOT NULL
);


ALTER TABLE public.core_emailconfig OWNER TO postgres;

--
-- Name: core_emailconfig_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_emailconfig ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_emailconfig_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_memo; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_memo (
    memo_id integer NOT NULL,
    create_date timestamp with time zone,
    comment text,
    user_id integer,
    task_assign_id integer NOT NULL
);


ALTER TABLE public.core_memo OWNER TO postgres;

--
-- Name: core_memo_memo_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_memo ALTER COLUMN memo_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_memo_memo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_mentorship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_mentorship (
    mentorship_id integer NOT NULL,
    mentor_id integer NOT NULL,
    mentee_id integer NOT NULL,
    start_date date,
    end_date date,
    is_active boolean NOT NULL,
    curriculum_title character varying(255) NOT NULL,
    total_weeks integer NOT NULL,
    report text,
    url_link character varying(200)
);


ALTER TABLE public.core_mentorship OWNER TO postgres;

--
-- Name: core_mentorship_mentorship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_mentorship ALTER COLUMN mentorship_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_mentorship_mentorship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_taskassign; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_taskassign (
    task_assign_id integer NOT NULL,
    title character varying(255),
    description text,
    guideline text,
    week integer NOT NULL,
    scheduled_start_date date,
    scheduled_end_date date,
    real_start_date date,
    real_end_date date,
    status character varying(10),
    priority character varying(2),
    "order" integer,
    mentorship_id_id integer NOT NULL,
    parent_id integer
);


ALTER TABLE public.core_taskassign OWNER TO postgres;

--
-- Name: core_taskassign_task_assign_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_taskassign ALTER COLUMN task_assign_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_taskassign_task_assign_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_taskmanage; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_taskmanage (
    task_manage_id integer NOT NULL,
    title character varying(255) NOT NULL,
    description text,
    guideline text,
    week integer NOT NULL,
    "order" integer,
    period integer,
    priority character varying(2),
    curriculum_id integer NOT NULL
);


ALTER TABLE public.core_taskmanage OWNER TO postgres;

--
-- Name: core_taskmanage_task_manage_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_taskmanage ALTER COLUMN task_manage_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_taskmanage_task_manage_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_user (
    is_superuser boolean NOT NULL,
    user_id integer NOT NULL,
    employee_number integer,
    is_admin boolean NOT NULL,
    tag character varying(255),
    role character varying(20) NOT NULL,
    join_date date,
    "position" character varying(50) NOT NULL,
    job_part character varying(50) NOT NULL,
    email character varying(254) NOT NULL,
    password character varying(128) NOT NULL,
    last_name character varying(50) NOT NULL,
    first_name character varying(50) NOT NULL,
    last_login timestamp with time zone,
    profile_image character varying(100),
    is_active boolean NOT NULL,
    is_staff boolean NOT NULL,
    company_id character varying(12),
    department_id integer
);


ALTER TABLE public.core_user OWNER TO postgres;

--
-- Name: core_user_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_user_groups (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.core_user_groups OWNER TO postgres;

--
-- Name: core_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_user_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_user ALTER COLUMN user_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_user_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: core_user_user_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.core_user_user_permissions (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.core_user_user_permissions OWNER TO postgres;

--
-- Name: core_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.core_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.core_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO postgres;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO postgres;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO postgres;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO postgres;

--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add content type	4	add_contenttype
14	Can change content type	4	change_contenttype
15	Can delete content type	4	delete_contenttype
16	Can view content type	4	view_contenttype
17	Can add session	5	add_session
18	Can change session	5	change_session
19	Can delete session	5	delete_session
20	Can view session	5	view_session
21	Can add company	6	add_company
22	Can change company	6	change_company
23	Can delete company	6	delete_company
24	Can view company	6	view_company
25	Can add email config	7	add_emailconfig
26	Can change email config	7	change_emailconfig
27	Can delete email config	7	delete_emailconfig
28	Can view email config	7	view_emailconfig
29	Can add mentorship	8	add_mentorship
30	Can change mentorship	8	change_mentorship
31	Can delete mentorship	8	delete_mentorship
32	Can view mentorship	8	view_mentorship
33	Can add user	9	add_user
34	Can change user	9	change_user
35	Can delete user	9	delete_user
36	Can view user	9	view_user
37	Can add alarm	10	add_alarm
38	Can change alarm	10	change_alarm
39	Can delete alarm	10	delete_alarm
40	Can view alarm	10	view_alarm
41	Can add chat session	11	add_chatsession
42	Can change chat session	11	change_chatsession
43	Can delete chat session	11	delete_chatsession
44	Can view chat session	11	view_chatsession
45	Can add chat message	12	add_chatmessage
46	Can change chat message	12	change_chatmessage
47	Can delete chat message	12	delete_chatmessage
48	Can view chat message	12	view_chatmessage
49	Can add department	13	add_department
50	Can change department	13	change_department
51	Can delete department	13	delete_department
52	Can view department	13	view_department
53	Can add curriculum	14	add_curriculum
54	Can change curriculum	14	change_curriculum
55	Can delete curriculum	14	delete_curriculum
56	Can view curriculum	14	view_curriculum
57	Can add docs	15	add_docs
58	Can change docs	15	change_docs
59	Can delete docs	15	delete_docs
60	Can view docs	15	view_docs
61	Can add task assign	16	add_taskassign
62	Can change task assign	16	change_taskassign
63	Can delete task assign	16	delete_taskassign
64	Can view task assign	16	view_taskassign
65	Can add memo	17	add_memo
66	Can change memo	17	change_memo
67	Can delete memo	17	delete_memo
68	Can view memo	17	view_memo
69	Can add task manage	18	add_taskmanage
70	Can change task manage	18	change_taskmanage
71	Can delete task manage	18	delete_taskmanage
72	Can view task manage	18	view_taskmanage
\.


--
-- Data for Name: core_alarm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_alarm (id, message, created_at, is_active, url_link, user_id) FROM stdin;
4	안녕하세요, 신진슬님.\n\n🔴 마감일이 지난 태스크: LLM 기본 개념 및 역사 이해, 개발 환경 설정 및 필수 도구 설치, LLM 관련 주요 논문 및 자료 리뷰\n\n🟡 오늘 마감인 태스크: LLM 기본 개념 및 역사 이해, 개발 환경 설정 및 필수 도구 설치\n\n마감일을 놓치지 않도록 확인해 주세요.	2025-07-30 02:05:06.442226+09	f	\N	15
6	'데이터 수집 및 전처리 방법 학습' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:21:02.094643+09	f	/mentee/task_list/?mentorship_id=2&task_id=17	15
5	신진슬 멘티가 '데이터 수집 및 전처리 방법 학습' 태스크를 검토요청했습니다.	2025-07-30 03:20:48.709883+09	f	/mentee/task_list/?mentorship_id=2&task_id=17	9
13	'기본 모델 학습 및 결과 분석' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:25:06.111415+09	f	/mentee/task_list/?mentorship_id=2&task_id=19	15
14	'LLM 관련 주요 논문 및 자료 리뷰' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:25:07.121516+09	f	/mentee/task_list/?mentorship_id=2&task_id=16	15
15	'개발 환경 설정 및 필수 도구 설치' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:25:08.456627+09	f	/mentee/task_list/?mentorship_id=2&task_id=15	15
19	'LLM 기본 개념 및 역사 이해' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:25:09.780126+09	f	/mentee/task_list/?mentorship_id=2&task_id=14	15
21	'모델 학습을 위한 데이터셋 준비' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:25:12.421098+09	f	/mentee/task_list/?mentorship_id=2&task_id=18	15
22	'하이퍼파라미터 튜닝 기법 학습' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:25:12.859618+09	f	/mentee/task_list/?mentorship_id=2&task_id=20	15
25	'팀별 프로젝트 주제 선정' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:25:18.380071+09	f	/mentee/task_list/?mentorship_id=2&task_id=23	15
26	'프로젝트 계획 수립' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:25:20.536236+09	f	/mentee/task_list/?mentorship_id=2&task_id=24	15
27	'모델 디버깅 및 오류 해결 방법 실습' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:25:20.591663+09	f	/mentee/task_list/?mentorship_id=2&task_id=22	15
7	신진슬 멘티가 '모델 학습을 위한 데이터셋 준비' 태스크를 검토요청했습니다.	2025-07-30 03:24:56.395018+09	f	/mentee/task_list/?mentorship_id=2&task_id=18	9
8	신진슬 멘티가 '개발 환경 설정 및 필수 도구 설치' 태스크를 검토요청했습니다.	2025-07-30 03:24:56.684171+09	f	/mentee/task_list/?mentorship_id=2&task_id=15	9
9	신진슬 멘티가 'LLM 기본 개념 및 역사 이해' 태스크를 검토요청했습니다.	2025-07-30 03:24:57.569613+09	f	/mentee/task_list/?mentorship_id=2&task_id=14	9
10	신진슬 멘티가 'LLM 관련 주요 논문 및 자료 리뷰' 태스크를 검토요청했습니다.	2025-07-30 03:24:58.046478+09	f	/mentee/task_list/?mentorship_id=2&task_id=16	9
11	신진슬 멘티가 '기본 모델 학습 및 결과 분석' 태스크를 검토요청했습니다.	2025-07-30 03:24:59.094458+09	f	/mentee/task_list/?mentorship_id=2&task_id=19	9
12	신진슬 멘티가 '하이퍼파라미터 튜닝 기법 학습' 태스크를 검토요청했습니다.	2025-07-30 03:25:00.190239+09	f	/mentee/task_list/?mentorship_id=2&task_id=20	9
16	신진슬 멘티가 '성능 평가 및 개선 방법 이해' 태스크를 검토요청했습니다.	2025-07-30 03:25:08.506284+09	f	/mentee/task_list/?mentorship_id=2&task_id=21	9
17	신진슬 멘티가 '팀별 프로젝트 주제 선정' 태스크를 검토요청했습니다.	2025-07-30 03:25:08.827126+09	f	/mentee/task_list/?mentorship_id=2&task_id=23	9
18	신진슬 멘티가 '모델 디버깅 및 오류 해결 방법 실습' 태스크를 검토요청했습니다.	2025-07-30 03:25:09.612424+09	f	/mentee/task_list/?mentorship_id=2&task_id=22	9
20	신진슬 멘티가 '프로젝트 계획 수립' 태스크를 검토요청했습니다.	2025-07-30 03:25:10.145272+09	f	/mentee/task_list/?mentorship_id=2&task_id=24	9
23	신진슬 멘티가 '프로젝트 결과 발표 준비' 태스크를 검토요청했습니다.	2025-07-30 03:25:12.864624+09	f	/mentee/task_list/?mentorship_id=2&task_id=25	9
24	신진슬 멘티가 '향후 개발 계획 및 개인 목표 설정' 태스크를 검토요청했습니다.	2025-07-30 03:25:13.22736+09	f	/mentee/task_list/?mentorship_id=2&task_id=26	9
28	'향후 개발 계획 및 개인 목표 설정' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:25:23.964575+09	f	/mentee/task_list/?mentorship_id=2&task_id=26	15
29	'성능 평가 및 개선 방법 이해' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:25:25.170745+09	f	/mentee/task_list/?mentorship_id=2&task_id=21	15
30	'프로젝트 결과 발표 준비' 태스크에 대한 멘토의 리뷰가 작성되었습니다. 확인해 주세요.	2025-07-30 03:25:30.267262+09	f	/mentee/task_list/?mentorship_id=2&task_id=25	15
31	신진슬 멘티가 '모델 디버깅 및 오류 해결 방법 실습' 태스크를 검토요청했습니다.	2025-07-30 10:09:28.616628+09	f	/mentee/task_list/?mentorship_id=2&task_id=22	9
32	박근호 멘티의 최종 평가 보고서가 생성되었습니다.	2025-07-30 10:18:15.117976+09	f	/mentee/task_list/?mentorship_id=3&open=final_report	2
\.


--
-- Data for Name: core_chatmessage; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_chatmessage (message_id, message_type, message_text, create_time, is_active, session_id) FROM stdin;
1	user	사원의 복지 포인트는 얼마야?	2025-07-30 00:00:00+09	f	1
2	bot	사원의 복지포인트는 연간 300,000점입니다. 이는 개인 맞춤형 복지에 사용할 수 있는 포인트로, 회사에서 연 1회 지급됩니다. 다른 직급에 따른 복지포인트 기준에 대해서도 궁금하신 점이 있으시면 말씀해 주세요!\n\n📄 참고 문서: rule_books.pdf\n - 제 4 장  보상  및  복리후생  규정 > 제 5 절  복지포인트  및  선택적  복지제도 > 제 11 조【복지포인트  제도  개요】\n - 제 4 장  보상  및  복리후생  규정 > 제 8 절  보상  및  복리후생  Q&A\n📄 참고 문서: point.txt\n - 청크 1	2025-07-30 00:00:00+09	f	1
3	bot	어서오세요. 무엇을 도와드릴까요?	2025-07-30 00:00:00+09	f	2
4	user	랭그래프와 랭체인의 차이를 알려줘	2025-07-30 00:00:00+09	f	2
5	bot	랭그래프는 일종의 그래픽 데이터를 생성하고 시각화하는 도구이며, 랭체인은 랭킹 정보를 블록체인 기술을 이용하여 안전하게 저장하고 관리하는 기술입니다. 둘은 서로 다른 개념이며 사용 목적과 기술적인 측면에서 차이가 있습니다.	2025-07-30 00:00:00+09	f	2
6	user	랭그래프 노드에 대해 설명해줘	2025-07-30 00:00:00+09	f	2
7	bot	\n랭그래프 노드는 랭그래프에서 데이터를 저장하고 있는 하나의 개체를 나타냅니다. 이 노드들은 다양한 속성값을 가지고 있으며, 랭그래프 내에서 상호 연결되어 있는 구조를 형성합니다. 노드들 간의 관계를 통해 그래프의 형태와 구조를 정의하고 데이터를 시각적으로 표현할 수 있습니다.	2025-07-30 00:00:00+09	f	2
8	user	랭그래프와 랭체인의 차이를 알려줘	2025-07-30 00:00:00+09	f	2
9	bot	\n랭그래프는 데이터를 시각적으로 표현하는 그래픽 도구이고, 랭체인은 랭킹 정보를 안전하게 저장하고 관리하는 블록체인 기술을 이용하는 것입니다. 랭그래프는 데이터 시각화에 주로 사용되며, 랭체인은 랭킹 정보의 신뢰성과 보안을 확보하는 데 주로 사용됩니다. 따라서 둘은 서로 다른 용도와 기술적 특성을 가지고 있습니다.	2025-07-30 00:00:00+09	f	2
10	user	리컬션 리미트와 에러 처리	2025-07-30 00:00:00+09	f	2
11	bot	리컬션 리미트와 에러 처리는 랭그래프에서 중요한 개념으로, 데이터 탐색과 관련된 문제를 효과적으로 관리하기 위해 설정됩니다.\n\n리컬션 리미트는 그래프 탐색 시 한 번에 방문할 수 있는 최대 노드 수를 제한하는 기능입니다. 예를 들어, 리컬션 리미트가 10으로 설정되어 있는 경우, 최대 10개의 노드까지 탐색한 후에는 더 이상 진행되지 않습니다. 이는 불필요한 탐색을 방지하고 시스템의 성능을 최적화하는 데 도움이 됩니다.\n\n에러 처리 측면에서는, 쿼리 실행 중 관련성 체크 과정에서 특정 노드가 반복적으로 나타나는 경우 리컬션 리미트에 도달할 수 있습니다. 이로 인해 쿼리 결과가 제한되거나 불완전하게 될 수 있습니다. 이러한 상황에서는 트라이셉트 구문을 사용하여 그래프 리컬션 에러를 효과적으로 처리하고, 서비스 장애를 예방할 수 있습니다.\n\n또한, API 상태가 느려지거나 응답이 지연될 때는 인터럽트를 통해 시스템을 리셋하여 문제를 해결할 수 있습니다. 만약 관련성이 없는 결과가 나타난다면 웹 검색을 통해 추가 정보를 보강하고, 최종적인 답변을 생성하는 구조가 필요합니다. 이를 통해 보다 정확하고 유용한 결과를 도출할 수 있습니다. \n\n결론적으로, 리컬션 리미트와 에러 처리는 랭그래프의 효율적인 데이터 탐색을 보장하고, 시스템의 신뢰성을 높이는 중요한 역할을 합니다.\n\n📄 참고 문서: langGraph.docx\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 3.7. 관련성 체크 및 흐름 제어 방법 > 4. 🔄 리컬션 리미트와 에러 처리\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.1. ️ 리컬션 리미트와 에러 처리\n - 4. 🔄 리컬션 리미트와 에러 처리 > 3. 🚀 랭그래프에서 쿼리 제작과 관련성 체크 > 2. ⚙️ 노드와 엣지의 정의 및 활용 > 1. 📊 LangGraph의 다이나믹한 흐름과 상태 관리 | 4. 🔄 리컬션 리미트와 에러 처리	2025-07-30 00:00:00+09	f	2
12	user	노드와 엣지의 정의 및 활용에 대해 알려줘	2025-07-30 00:00:00+09	f	2
13	bot	\n노드는 그래프의 구성 요소 중 하나로, 데이터를 저장하고 있는 개체를 나타냅니다. 노드들은 그래프 내에서 상호 연결되어 있는 구조를 형성하며, 그래프의 형태와 구조를 정의하는 역할을 합니다. 엣지는 노드들 간의 관계를 나타내는 선으로, 두 개의 노드를 연결하여 그래프를 구성합니다.\n\n노드와 엣지는 그래프 데이터를 표현하고 상호 관계를 시각화하는 데 사용됩니다. 노드는 일반적으로 그래프 내부에 데이터를 저장하거나 논리적으로 그룹화하는 데 활용되며, 엣지는 노드들 간의 관계를 표현하여 그래프의 구조를 정의합니다. 이를 통해 복잡한 데이터나 시스템의 관계를 시각적으로 파악하고 분석할 수 있습니다.	2025-07-30 00:00:00+09	f	2
14	user	랭그래프 구조와 정의	2025-07-30 00:00:00+09	f	2
20	user	LM 엔서 노드와 멀티턴 대화의 구현에 대해 문서기반으로 알려줘	2025-07-30 00:00:00+09	f	2
24	user	랭그래프 구조와 정의에 대해 알려줘	2025-07-30 00:00:00+09	f	2
33	user	나 오늘 기분이 우울해.   맛있는 점심을 먹고 싶어. 메뉴 추천해줘!	2025-07-30 00:00:00+09	f	3
36	bot	중식을 좋아하신다면 중국 요리 중에서 닭갈비, 짜장면, 탕수육, 짬뽕, 양장피 등을 추천해드릴 수 있어요. 어떤 음식이 땡기시나요? 원하시는 음식이 있으시면 더 자세한 메뉴를 추천해드릴 수도 있어요. 맛있는 식사 하시고 기분이 좋아지시길 바랄게요! 😊✨	2025-07-30 00:00:00+09	f	3
37	user	랭그래프는 정보를 처리하는 노드와 이들을 연결하는 포인트로 구성되는데 맞아?	2025-07-30 00:00:00+09	f	3
40	bot	랭그래프의 노드와 구조에 대한 설명을 다시 확인하려는 것인가요? 다른 부분이 헷갈린 것이 있는지 자세히 설명해주시면 도움을 드릴 수 있습니다.	2025-07-30 00:00:00+09	f	3
41	user	이전 대화를 참고해서 내가 틀린 부분을 알려줘	2025-07-30 00:00:00+09	f	3
45	bot	어서오세요. 무엇을 도와드릴까요?	2025-07-30 00:00:00+09	f	4
47	bot	안녕하세요. 무엇을 도와드릴까요?	2025-07-30 00:00:00+09	f	4
48	user	랭그래프 구조와 노드에 대해 설명해줘	2025-07-30 00:00:00+09	f	4
51	bot	랭그래프 구조는 정보를 처리하는 노드와 이들을 연결하는 엣지로 구성되어 있습니다. 각 노드는 특정한 역할을 수행하며, 이 노드들은 질문, 답변, 문서 등의 항목으로 정의됩니다. \n\n1. **노드 정의**:\n   - **리트리브 노드**: PDF 문서에서 정보를 검색하는 역할을 합니다. 이 노드는 사용자의 질문에 대한 관련 정보를 선택하여 제공합니다.\n   - **제너레이션 노드**: 레그체인을 사용하여 답변을 생성합니다. 이는 노드 간의 데이터 흐름을 통해 관련 정보에서 유용한 답변을 생산하는 역할을 맡고 있습니다.\n   - **그레이더 노드**: 문서의 관련성을 평가하여 적합한 정보를 선별합니다. 이 노드는 질문과 문서의 내용을 비교하고 필터링하여 의미 있는 정보를 추가합니다.\n   - **추가 노드**: 쿼션 라우팅과 문서 관련성 평가를 수행하여 적절한 경로로 데이터를 전송하는 데 기여합니다.\n\n2. **엣지와 흐름**:\n   - 각 노드들은 서로 엣지로 연결되어 있으며, 이 엣지는 지식의 흐름을 나타냅니다. 예를 들어, 조건부 엣지를 사용하여 중간 흐름을 변경하는 것도 가능하여, 다양한 시나리오에 따른 분기 처리를 활용할 수 있습니다.\n\n3. **프로세스**:\n   - 정보의 검색과 생성이 완료되면, 플로우 엔지니어링을 통해 생성된 답변을 평가합니다. 이를 통해 노드 간의 연결을 설정하고, 질문과 문서의 관련성을 지속적으로 평가합니다. 평가자는 문서와 질문의 관련성을 바탕으로 필터링 과정을 적용하여 더욱 유용한 정보를 확보할 수 있습니다.\n\n4. **할루스네이션 체크**:\n   - 생성된 답변이 문서와 얼마나 일치하는지를 평가하여 할루스네이션 여부를 확인합니다. 이 과정에서 할루스네이션이 없으면 답변 평가를 진행하고, 있을 경우 다시 제너레이션을 유도하여 결과의 품질을 높입니다.\n\n이와 같은 구조와 흐름을 통해 랭그래프는 복잡한 정보를 효율적으로 처리하고, 유의미한 결과를 제공할 수 있게 됩니다. 궁금한 점이 있으시면 언제든지 질문해 주세요!\n\n📄 참고 문서: langGraph.docx\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 1.4. 랭그래프의 구성 요소 및 흐름\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 2.6. 랭 그래프 생성 과정 소개\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 5.8. ️ 그래프 구조와 노드 정의	2025-07-30 00:00:00+09	f	4
21	bot	LM 엔서 노드는 LangGraph의 구조에서 중요한 역할을 하며, 리트리브 단계에서 문서 검색이 완료된 후에 제네레이션이 이뤄지는 방식으로 구현됩니다. 이 과정에서는 입력된 질문과 관련된 검색된 문서를 포함한 컨텍스트를 바탕으로 답변이 생성됩니다. 이는 이전에 반환된 문서들이 포맷팅되어 사용되며, 효율적인 답변 생성을 가능하게 합니다.\n\n멀티턴 대화에서는 질문과 답변이 지속적으로 메시지에 누적되어 사용자의 입력에 자연스럽게 연결됩니다. 이러한 메시지 누적 로직은 이전 메시지를 `애드 메시지` 방식으로 추가함으로써 대화의 히스토리를 기록할 수 있도록 설계되어 있습니다. 이로 인해 사용자는 이전 대화 내용을 뒷받침하여 보다 연속적이고 일관된 대화를 나눌 수 있습니다.\n\n그래프 생성은 리트리브 도큐먼트 노드와 LM 엔서 노드 간의 연결 구조로 이루어져 있으며, 리트리버가 문서를 검색한 후 LM 엔서에서 구체적인 결과를 도출하는 방식입니다. 이러한 구조는 사용자에게 보다 명확하고 유용한 정보 제공을 위해 설계되어 있으며, 멀티턴 대화의 흐름을 매끄럽게 이어갈 수 있도록 돕습니다.\n\n📄 참고 문서: langGraph.docx\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 3.5. LM 엔서 노드와 멀티턴 대화의 구현\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 5.8. ️ 그래프 구조와 노드 정의\n - 2. ⚙️ 노드와 엣지의 정의 및 활용 > 1. 📊 LangGraph의 다이나믹한 흐름과 상태 관리 | 2. ⚙️ 노드와 엣지의 정의 및 활용	2025-07-30 00:00:00+09	f	2
22	user	LM 엔서 노드와 멀티턴 대화의 구현	2025-07-30 00:00:00+09	f	2
25	bot	랭그래프는 그래프 데이터를 시각적으로 표현하는 도구이며, 그 구조와 정의는 다음과 같습니다.\n\n1. 노드(Node): 랭그래프에서는 데이터를 저장하고 있는 하나의 개체를 노드라고 합니다. 노드는 그래프의 기본 단위이며, 다양한 속성값을 가지고 있습니다. 노드들은 서로 연결되어 있는 구조를 형성하고, 이를 통해 전체 그래프의 형태와 구조를 정의합니다.\n\n2. 엣지(Edge): 엣지는 노드들 간의 관계를 나타내는 선이며, 두 노드를 연결하는 역할을 합니다. 엣지는 노드 간의 관계를 정의하고, 데이터의 흐름이나 연결 관계를 시각적으로 표현할 수 있습니다.\n\n3. 그래프(Graph): 랭그래프는 노드와 엣지로 구성된 그래프 구조를 가지고 있습니다. 이 그래프 구조를 통해 데이터의 관계와 연결을 효과적으로 표현하고, 다양한 시각화 기법을 활용하여 데이터를 이해하고 분석할 수 있습니다.\n\n랭그래프의 구조와 정의를 이해하면, 데이터의 관계를 시각적으로 표현하고 분석하는 데 도움이 될 것입니다.	2025-07-30 00:00:00+09	f	2
27	bot	죄송합니다, 그 질문에 대해서는 제가 도움을 드릴 수 없습니다. 다른 질문이 있으시면 언제든지 물어보세요. 감사합니다.	2025-07-30 00:00:00+09	f	2
28	user	문서를 기반으로 랭그래프 구조와 정의에 대해 알려줘	2025-07-30 00:00:00+09	f	2
15	bot	랭그래프는 그래프 데이터를 생성하고 시각화하는 도구이며, 노드와 엣지로 구성되어 있습니다. 노드는 그래프 내에서 데이터를 나타내는 개체이고, 엣지는 노드들 간의 관계를 나타내는 선이라고 할 수 있습니다. 랭그래프는 노드와 엣지의 조합으로 구성되며, 이를 통해 데이터의 구조와 관계를 시각적으로 표현할 수 있습니다. 각 노드와 엣지는 다양한 속성값을 가지고 있어서 그래프의 모양과 구조를 정의하고 데이터를 효과적으로 표현할 수 있습니다. 따라서 랭그래프의 구조와 정의는 그래프 데이터를 효율적으로 관리하고 시각화하는 데 중요한 역할을 합니다.	2025-07-30 00:00:00+09	f	2
16	user	그래프 구조와 노드 정의	2025-07-30 00:00:00+09	f	2
17	bot	그래프 구조는 노드(Node)와 엣지(Edge)로 이루어져 있습니다. 노드는 그래프 내에서 데이터를 저장하고 있는 개체를 의미하며, 엣지는 노드간의 관계를 나타내는 연결선을 말합니다. \n\n그래프 구조에서 노드는 서로 다른 노드와의 연결을 통해 네트워크 형태를 이루고 있습니다. 각 노드는 고유한 속성을 가지고 있어서 그래프 내에서 특정 노드를 식별하거나 구별할 수 있습니다. 노드간의 연결은 엣지를 통해 구성되며, 엣지는 노드간의 관계를 나타내는 정보를 담고 있습니다.\n\n그래프 구조는 복잡한 데이터 관계를 시각적으로 표현하고 분석하는 데 유용하며, 노드와 엣지의 정의와 활용은 그래프 분석 및 데이터 시각화에 있어서 중요한 요소입니다. 이를 통해 데이터 간의 관계를 파악하고 인사이트를 얻을 수 있습니다.	2025-07-30 00:00:00+09	f	2
18	user	LM 엔서 노드와 멀티턴 대화의 구현	2025-07-30 00:00:00+09	f	2
19	bot	LM 엔서 노드는 Language Model의 엔터티를 나타내며, 멀티턴 대화의 구현에 사용될 수 있습니다. 멀티턴 대화란 한 사용자와 시나리오를 기반으로 한 대화의 연속을 의미합니다. LM 엔서 노드는 다양한 사용자 발화를 이해하고, 해당 대화에 맞는 적절한 응답을 생성하기 위해 사용될 수 있습니다.\n\n멀티턴 대화의 구현을 위해서는 먼저 LM 엔서 노드를 이용하여 사용자 발화를 이해하고 대화 컨텍스트를 유지해야 합니다. 이를 통해 이전 대화 내용을 고려한 응답을 생성하고, 사용자와의 자연스러운 대화 흐름을 유지할 수 있습니다.\n\n또한, 멀티턴 대화의 효율적인 구현을 위해서는 상태 관리 및 대화 흐름 제어가 중요합니다. LM 엔서 노드는 다양한 상황에 대응할 수 있는 유연성과 정확성을 제공하므로, 멀티턴 대화의 구현에 많은 도움이 될 것입니다.\n\n따라서 LM 엔서 노드와 멀티턴 대화의 구현을 통해 사용자와의 자연스러운 대화 경험을 제공하고, 더 나은 상호작용을 실현할 수 있을 것입니다.	2025-07-30 00:00:00+09	f	2
23	bot	LM 엔서 노드는 리트리브 단계에서 문서 검색이 완료된 후, 제네레이션이 이루어지는 구조입니다. 입력된 질문과 검색된 문서를 포함한 컨텍스트를 바탕으로 제네레이션이 진행되며, 이는 이전에 반환된 문서들이 포매팅되어 포함됩니다. 이렇게 함으로써, LM 엔서 노드는 사용자의 질문에 가장 적합한 답변을 생성할 수 있게 됩니다.\n\n특히, 멀티턴 대화에서는 질문과 답변이 지속적으로 메시지에 누적되며, 이는 사용자가 입력하는 것에 자연스럽게 연결됩니다. 메시지 누적 로직은 메시지를 애드 메시지로 추가하여 대화 히스토리를 기록할 수 있게 해 줍니다. 이를 통해 사용자가 대화의 맥락을 계속 유지하면서도 더 나은 상호작용을 할 수 있습니다.\n\n그래프 생성은 리트리브 노드와 LM 엔서 노드를 연결하는 구조로 구현되어 있습니다. 리트리버가 문서를 검색한 후, LM 엔서에서 이 결과를 도출함으로써 전체적인 대화 흐름이 매끄럽게 이어질 수 있습니다. 이러한 구현 방식은 멀티턴 대화의 자연스러운 진행과 높은 품질의 답변 생성을 지원하는 중요한 요소입니다.\n\n📄 참고 문서: langGraph.docx\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 1.7. 상태 및 리서의 역할 > 2. ⚙️ 노드와 엣지의 정의 및 활용\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 3.5. LM 엔서 노드와 멀티턴 대화의 구현\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 5.8. ️ 그래프 구조와 노드 정의	2025-07-30 00:00:00+09	f	2
26	user	ㅁㄴㅇㄹ	2025-07-30 00:00:00+09	f	2
29	bot	랭그래프는 정보를 처리하고 시각화하기 위해 구성된 데이터 구조로, 주로 노드(Node)와 엣지(Edge)로 이루어져 있습니다. 각 구성 요소의 정의와 활용에 대해 아래와 같이 설명할 수 있습니다.\n\n### 노드(Node)\n노드는 랭그래프 내에서 정보를 저장하고 처리하는 기본 단위입니다. 각 노드는 특정한 역할을 수행하며, 다양한 속성 값을 가질 수 있습니다. 예를 들어, 사용자 정보, 문서 내용, 또는 특정 데이터 포인트 등을 저장할 수 있습니다. 노드는 그래프 내에서 상호 작용하고 연결되며, 이러한 연결이 노드 간의 관계를 형성합니다.\n\n### 엣지(Edge)\n엣지는 노드 간의 관계를 나타내는 연결선입니다. 엣지는 두 노드를 연결하여 데이터의 흐름이나 관계를 정의합니다. 엣지는 방향성이 있을 수도 있고(즉, 단방향), 없을 수도 있습니다(즉, 양방향). 또한, 조건부 엣지를 사용하면 특정 조건에 따라 데이터 흐름을 분기시킬 수도 있습니다. 이를 통해 다양한 응답을 생성하고, 복잡한 데이터 구조를 효과적으로 관리할 수 있습니다.\n\n### 랭그래프의 구성 및 흐름\n랭그래프 생성 과정은 여러 단계를 포함합니다:\n1. **상태 정의**: 그래프의 전체 구조를 설정합니다. 이를 위해 타입드 딕트를 사용하며, 이때 키와 밸류를 명시해야 합니다.\n2. **노드 정의**: 그래프에 포함될 노드를 식별하고 그 속성을 정의합니다.\n3. **그래프 정의**: 노드와 엣지를 바탕으로 전체 그래프의 구조를 설계합니다.\n4. **컴파일**: 정의된 노드와 엣지를 바탕으로 그래프를 실행 가능한 형태로 변환합니다.\n5. **시각화**: 최종적으로 그래프의 시각적 표현을 생성하여 사용자에게 정보를 전달합니다.\n\n이러한 과정을 통해 랭그래프는 문서에서 정보를 검색하고, 처리하며, 최종적으로 시각적으로 표현할 수 있도록 돕습니다. 이를 통해 데이터의 관계를 쉽게 이해하고 분석할 수 있는 환경을 제공합니다.\n\n📄 참고 문서: langGraph.docx\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 1.4. 랭그래프의 구성 요소 및 흐름\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 2.5. 랭그래프 기본 그래프 생성 과정 소개\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 2.6. 랭 그래프 생성 과정 소개	2025-07-30 00:00:00+09	f	2
44	bot	랭그래프는 정보를 처리하는 다양한 노드와 이들을 연결하는 엣지로 구성되어 있습니다. 여기서 노드는 특정한 작업이나 역할을 수행하는 요소이며, 각 노드 간의 연결을 통해 정보의 흐름이 이루어집니다. \n\n1. **노드 정의**: 각 노드는 특정한 역할을 가집니다. 예를 들어, 한 노드는 문서에서 정보를 검색하는 기능을 수행할 수 있고, 다른 노드는 생성된 답변을 평가하는 역할을 할 수 있습니다. 이러한 노드의 역할을 명확하게 정의하는 것이 중요합니다.\n\n2. **그래프 구조**: 노드들은 엣지로 연결되어 전체적인 흐름을 형성합니다. 관계에 따라 조건부 엣지를 사용하여 중간에서 흐름을 변경할 수 있으며, 이는 다양한 응답을 생성하는 데 도움이 됩니다. 이러한 구조는 복잡한 질문에 대한 다양한 응답을 처리하는 데 유용합니다.\n\n3. **상태 정의**: 노드를 정의하기 위한 첫 단계로, 타입드 딕트를 상속받는 상태를 정의합니다. 상태 정의 시 왼쪽은 키, 오른쪽은 값을 나타내며, 각 타입을 명시해야 합니다. 이 과정은 노드와 그래프의 구성 요소를 명확히 하는 데 도움이 됩니다.\n\n4. **정보 리트리브와 통합**: 복잡한 구조의 그래프에서는 문서로부터 정보를 리트리브하고, 여러 인공지능 모델(GPT 및 클로드 등)을 병렬로 요청하여 두 개의 답변을 통합하는 방식을 사용합니다. 이를 통해 답변의 품질을 높일 수 있습니다.\n\n5. **에러 처리**: 답변의 정확성이 부족할 때에는 리라이트 커리를 통해 정보를 다시 리트리브하거나, 평가자가 질문과 문서의 관련성을 검토하여 필요에 따라 검색된 문서를 업데이트합니다.\n\n이러한 랭그래프의 구조와 절차는 사용자에게 유용한 정보를 제공하기 위해 세밀하게 설계되어 있으며, 사용자는 이를 통해 보다 효율적으로 데이터를 처리하고 질문에 대한 적절한 답변을 생성할 수 있습니다. \n\n이 관련 과정과 문서들의 참고 내용을 통해 랭그래프의 이해를 돕고, 이를 실제 업무에 적용할 수 있습니다.\n\n📄 참고 문서: langGraph.docx\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 1.4. 랭그래프의 구성 요소 및 흐름\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 2.5. 랭그래프 기본 그래프 생성 과정 소개\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 2.6. 랭 그래프 생성 과정 소개\n📄 참고 문서: rule_books.pdf\n - 제 1 장  총칙  (General Provisions) > 제 10 조  【정보보호의  원칙】\n - 제 1 장  총칙  (General Provisions) > 제 5 조  【정의】\n - 제 2 장  인사규정 > 제 10 절  근로계약의  종류  (Types of Employment > 제 30 조【계약  유형】	2025-07-30 00:00:00+09	f	3
30	bot	어서오세요. 무엇을 도와드릴까요?	2025-07-30 00:00:00+09	f	3
31	user	랭그래프 노드와 구조에 대해 문서 기반으로 설명해줘	2025-07-30 00:00:00+09	f	3
32	bot	랭그래프는 정보를 처리하는 노드와 이들을 연결하는 엣지로 구성됩니다. 각 노드는 특정한 역할을 수행하며, 이들 간의 연결을 통해 정보를 흐르게 합니다. 노드 구조는 다양한 기능과 목적에 따라 나뉘며, 조건부 엣지를 사용하여 중간에서 흐름을 변경할 수도 있습니다. 이는 분기 처리를 통해 다양한 응답을 생성할 수 있게 합니다.\n\n랭그래프 생성 과정은 다음과 같습니다:\n\n1. **스테이트 정의**: 상태를 정의하는 과정으로, 타입드 딕트를 상속받아 구현합니다. 여기서 왼쪽은 키, 오른쪽은 밸류를 나타내며, 타입을 명시해야 합니다.\n   \n2. **노드 정의**: 각각의 노드는 특정한 작업이나 역할을 수행합니다. 이러한 노드는 문서에서 정보를 리트리브하고, 생성된 답변을 평가하는 역할을 하기도 합니다.\n\n3. **그래프 정의**: 노드와 엣지를 연결하여 전체적인 흐름을 정의합니다. 이를 통해 질문과 문서의 관련성을 평가하고, 필요한 경우 쿼리를 수정합니다.\n\n4. **컴파일 및 시각화**: 정의된 그래프를 바탕으로 컴파일하고, 최종적으로 시각화하여 구조를 한눈에 볼 수 있게 합니다.\n\n5. **에러 처리**: 답변이 만족스럽지 않을 경우 리라이트 커리를 통해 정보를 다시 리트리브하거나, 평가자가 질문과 문서의 관련성을 평가하여 필요에 따라 검색된 문서를 업데이트하는 과정도 포함됩니다.\n\n이와 같은 구조와 과정을 통해 랭그래프는 사용자에게 유용한 정보를 제공하며, 복잡한 구조에서 효율적으로 데이터를 처리할 수 있게 합니다.\n\n📄 참고 문서: langGraph.docx\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 1.4. 랭그래프의 구성 요소 및 흐름\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 2.5. 랭그래프 기본 그래프 생성 과정 소개\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 2.6. 랭 그래프 생성 과정 소개	2025-07-30 00:00:00+09	f	3
34	bot	저도 우울할 때는 맛있는 음식을 먹으면 기분이 좋아지더라구요. 어떤 종류의 음식을 좋아하시나요? 한식, 중식, 양식 중에 어떤 것을 원하시나요? 제가 맛있는 음식을 추천해드릴게요. 😊	2025-07-30 00:00:00+09	f	3
35	user	중식	2025-07-30 00:00:00+09	f	3
38	bot	랭그래프는 정보를 처리하는 노드와 이들을 연결하는 엣지로 구성됩니다. 각 노드는 특정한 역할을 수행하며, 이들 간의 연결을 통해 정보를 처리합니다. 따라서 랭그래프는 정보 처리를 위한 노드와 이들을 연결하는 포인트로 구성되어 있습니다.	2025-07-30 00:00:00+09	f	3
39	user	내가 어떤걸 헷갈렸을까?	2025-07-30 00:00:00+09	f	3
43	user	랭그래프 노드와 구조에 대해 우리 회사 문서 기반으로 설명해줘	2025-07-30 00:00:00+09	f	3
52	user	쿼리   리라이트   시스템의   설계   및   활용	2025-07-30 00:00:00+09	f	4
55	user	안녕!	2025-07-30 00:00:00+09	f	5
58	bot	쿼리 리라이트 시스템은 사용자가 입력한 원본 질문을 개선하여 보다 명확하고 적절한 질문으로 변환하는 과정을 포함합니다. 이 시스템에서는 원본 질문을 그대로 보관하는 것이 중요한데, 이는 사용자가 질문의 내용에 혼란을 느끼지 않도록 하기 위함입니다.\n\n리라이트된 질문은 다양한 시도를 통해 반복적으로 생성될 수 있으며, 각 질문의 개선 과정을 기록하여 가장 최근의 질문을 활용하는 구조를 가지고 있습니다. 이 시스템에 쿼리 리라이트 모듈이 추가됨으로써, 보다 정교한 답변 생성을 위한 파이프라인이 구축됩니다. 리라이트된 질문을 기반으로 검색 및 관련성 체크를 수행하고, 최종적으로 사용자에게 원하는 형식으로 답변을 제공합니다.\n\n또한, 에이전트 시스템이 질문의 적합성을 판단하여 불필요한 검색을 줄이고, 질문이 간단할 경우 즉시 답변을 생성하는 등의 효율성을 제공합니다. 마지막으로, 도큐먼트 프롬프트를 통해 메타데이터를 포함하여 결과를 제공함으로써 답변의 출처를 명확히 하고, 검색된 문서의 내용과 페이지 정보를 포함하여 사용자에게 더 명확한 정보를 전달하는 데 기여합니다.\n\n이렇게 설계된 쿼리 리라이트 시스템은 유저의 비정형 질문을 보다 효과적으로 처리하고, 질문 관리의 용이성을 높여 줍니다.\n\n📄 참고 문서: langGraph.docx\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.2. 릴러스 체크와 쿼리 리라이트의 중요성\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.7. 쿼리 제작성 모듈의 추가와 기능 설명\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.8. 쿼리 리라이트 시스템의 설계 및 활용	2025-07-30 00:00:00+09	f	5
63	user	사원의 복지 포인트에 대해 알려줘	2025-07-30 00:00:00+09	f	6
64	bot	사원의 복지 포인트 제도에 대해 말씀드리겠습니다. 사원과 주임 직급의 경우, 연간 지급되는 복지 포인트는 400,000점입니다. 이 포인트는 개인 맞춤형 복지에 사용될 수 있으며, 다양한 복지 항목에 활용 가능합니다. 포인트는 가족 명의로도 사용할 수 있지만 이 경우, 영수증과 가족관계 증명서를 제출해야 합니다. 추가로 궁금한 점이 있으면 언제든지 질문해 주세요!\n\n📄 참고 문서: point_new.txt\n - 청크 1	2025-07-30 00:00:00+09	f	6
66	user	안녕	2025-07-30 00:00:00+09	f	8
42	bot	대화 내용과 질문이 다소 혼란스러웠던 것 같아요. 이전에 랭그래프에 대한 질문을 하셨고, 그에 대한 설명을 드렸지만, 이후 질문에 대해 명확한 내용을 요구하셨습니다. \n\n"틀린 부분"을 찾으시는 것이라면, 현재 대화에서 명시된 정보와 관련된 문서 부분들은 주로 징계 절차 및 인사 평가와 관련된 내용입니다. 그러므로 혹시 랭그래프와 관련해 혼동되신 부분이 있었다면, 그 부분을 말씀해주시면 더 세부적으로 도와드릴 수 있을 것 같습니다.\n\n특히, 여러분이 징계 절차나 성과 평가와 관련된 정보에 대해 질문하신 것이라면, 제시된 각 출처의 내용을 요약하거나 설명해드릴 수 있습니다. 어떤 점에서 틀린 것 같으신지 더 구체적으로 말씀해주시면 감사하겠습니다! 😊\n\n📄 참고 문서: rule_books.pdf\n - 제 5 장  징계  및  윤리규정 > 제 3 절  징계  절차  및  항변권 > 제 7 조【징계  절차  개요】 > 1. 위반행위  인지  및  신고\n - 제 5 장  징계  및  윤리규정 > 제 3 절  징계  절차  및  항변권 > 제 7 조【징계  절차  개요】 > 2. 사실조사  ( 인사팀  주관 ) > 1. 위반행위  인지  및  신고 | 5. 징계  수위  결정\n - 제 6 장  인사행정  및  조직문화  운영방침 > 제 3 절  인사평가  및  승진제도 > 제 9 조【성과평가  절차】 > 2. 중간점검  (Q2/Q3) > 1. 목표설정  (Q1) | 2. 중간점검  (Q2/Q3)	2025-07-30 00:00:00+09	f	3
46	user	안녕	2025-07-30 00:00:00+09	f	4
49	bot	죄송합니다, 랭그래프 구조와 노드에 대한 설명을 드리겠습니다. \n\n랭그래프는 그래프 이론에서 사용되는 개념으로, 방향이 있는 그래프를 의미합니다. 여기서 노드는 그래프의 구성 요소 중 하나로, 정점이라고도 불립니다. 노드는 그래프 내에서 개별적으로 식별될 수 있는 객체를 나타냅니다. \n\n노드는 일반적으로 데이터나 정보를 담고 있으며, 각 노드는 다른 노드와의 관계를 통해 전체 그래프의 구조를 형성합니다. 랭그래프 구조에서는 노드들이 서로 방향을 가지고 연결되어 있어서, 어떤 노드에서 다른 노드로 이동할 때 방향성을 가지게 됩니다. \n\n이러한 구조를 통해 랭그래프는 네트워크, 시스템, 소셜 그래프 등 다양한 분야에서 활용되며, 다양한 데이터나 정보를 나타내는 데 사용될 수 있습니다. \n\n더 궁금한 점이 있으시면 언제든지 물어보세요. 문의사항이 있으면 도와드리겠습니다.	2025-07-30 00:00:00+09	f	4
50	user	랭그래프 구조와 노드에 대해 문서기반으로 설명해줘	2025-07-30 00:00:00+09	f	4
53	bot	쿼리 리라이트 시스템의 설계 및 활용은 사용자에게 더 나은 질문을 생성하고, 이에 따라 보다 효과적인 답변을 제공하기 위한 과정입니다. 아래에서 이 시스템의 주요 요소를 설명하겠습니다.\n\n1. **질문 리라이트 과정**:\n   - 사용자가 입력한 원본 질문은 리라이트 과정을 통해 개선된 형태로 변환됩니다. 이 과정에서 원본 질문을 그대로 보관하는 것이 중요합니다. 만약 원본 질문이 보여지지 않으면 사용자가 질문 내용에 혼란을 겪을 수 있기 때문입니다.\n\n2. **반복적 개선과 기록**:\n   - 리라이트된 질문은 다양한 시도를 통해 지속적으로 생성될 수 있으며, 각 질문들의 개선 과정을 기록하여 최신 질문을 활용합니다. 이렇게 함으로써 질문의 품질을 지속적으로 향상시킵니다.\n\n3. **쿼리 리라이트 모듈**:\n   - 시스템에 쿼리 리라이트 모듈을 추가하여, 보다 정교한 답변 생성을 위한 파이프라인 구조가 형성됩니다. 리라이트된 질문을 기반으로 검색 및 관련성 체크가 진행되고, 최종적으로 유저가 원하는 형식의 답변을 제공합니다.\n\n4. **에이전트 시스템의 역할**:\n   - 에이전트 시스템을 통해 질문의 적합성을 판단하고 불필요한 검색 과정을 줄입니다. 질문이 간단한 경우에는 즉시 답변을 생성할 수 있어 효율성을 더합니다.\n\n5. **메타데이터 제공**:\n   - 도큐먼트 프롬프트를 통해 결과에 메타데이터를 포함시키는 방식으로 답변의 출처를 명확히 할 수 있습니다. 이는 검색된 문서의 내용과 페이지 정보를 포함하여 사용자에게 보다 명확한 정보를 전달하는 데 기여합니다.\n\n이러한 설계 및 활용 방안은 쿼리 리라이트가 단순히 질문 형식의 변화를 넘어서, 사용자가 원하는 정보를 효과적으로 얻을 수 있도록 지원하는 중요한 역할을 합니다. 추가적인 궁금증이 있으시면 언제든지 질문해 주세요!\n\n📄 참고 문서: langGraph.docx\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.2. 릴러스 체크와 쿼리 리라이트의 중요성\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.7. 쿼리 제작성 모듈의 추가와 기능 설명\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.8. 쿼리 리라이트 시스템의 설계 및 활용	2025-07-30 00:00:00+09	f	4
54	bot	어서오세요. 무엇을 도와드릴까요?	2025-07-30 00:00:00+09	f	5
56	bot	안녕하세요! 무엇을 도와드릴까요? :)	2025-07-30 00:00:00+09	f	5
57	user	쿼리   리라이트   시스템의   설계   및   활용에 대해 설명해줘	2025-07-30 00:00:00+09	f	5
59	bot	어서오세요. 무엇을 도와드릴까요?	2025-07-30 00:00:00+09	f	6
60	user	사원의 복지 포인트에 대해 알려줘	2025-07-30 00:00:00+09	f	6
61	bot	사원의 복지 포인트 제도에 대해 설명드리겠습니다. 회사는 연 1회 임직원에게 복지 포인트를 부여하며, 이는 개인 맞춤형 복지에 사용할 수 있습니다. 사원의 경우, 연간 지급되는 포인트는 300,000점입니다. 이 포인트는 다양한 복지 항목에 사용 가능하며, 가족 명의로도 결제가 이뤄질 수 있지만, 이때는 영수증과 가족관계 증명서 제출이 필요합니다.\n\n궁금한 점이나 더 알고 싶은 사항이 있으면 언제든지 질문해 주세요!\n\n📄 참고 문서: rule_books.pdf\n - 제 4 장  보상  및  복리후생  규정 > 제 5 절  복지포인트  및  선택적  복지제도 > 제 11 조【복지포인트  제도  개요】\n - 제 4 장  보상  및  복리후생  규정 > 제 8 절  보상  및  복리후생  Q&A\n📄 참고 문서: point.txt\n - 청크 1	2025-07-30 00:00:00+09	f	6
62	bot	어서오세요. 무엇을 도와드릴까요?	2025-07-30 00:00:00+09	f	7
65	bot	어서오세요. 무엇을 도와드릴까요?	2025-07-30 00:00:00+09	f	8
67	bot	안녕하세요! 무엇을 도와드릴까요?	2025-07-30 00:00:00+09	f	8
68	user	쿼리 리라이트 시스템의 설계 및 활용에 대해 알려줘	2025-07-30 00:00:00+09	f	8
73	user	안녕	2025-07-30 00:00:00+09	t	9
71	bot	쿼리 리라이트 시스템은 사용자가 입력한 원본 질문을 기반으로 보다 명확하고 적합한 질문을 생성하는 과정입니다. 이 시스템의 주요 목적은 유저가 질문 내용을 더 명확히 이해하고, 더 나은 검색 결과를 얻을 수 있도록 돕는 것입니다. 원본 질문을 그대로 보관하는 것이 특히 중요하며, 이는 질문 내용을 왜곡하거나 혼란을 초래하지 않기 위해서입니다.\n\n리라이트 시스템은 여러 가지 시도를 통해 질문을 반복적으로 개선하며, 이 과정은 기록되어 최신 질문을 효율적으로 활용할 수 있도록 설정됩니다. 쿼리 리라이트 모듈을 통해 정교한 답변 생성을 위한 파이프라인 구조가 구축되며, 리라이트된 질문을 기반으로 검색 및 관련성 체크를 실행합니다. 최종적으로는 유저가 원하는 형식으로 빠르고 정확하게 답변을 제공하는 것이 목표입니다.\n\n또한, 에이전트 시스템을 활용하여 질문의 적합성을 판단하고 불필요한 검색 과정을 제거하여 효율성을 극대화합니다. 질문이 간단한 경우에는 즉시 답변이 생성되어 신속한 정보 제공이 가능합니다. 마지막으로, 문서 프롬프트를 통해 메타데이터와 함께 답변을 제공함으로써 답변의 출처를 명확히 하고, 사용자에게 신뢰할 수 있는 정보를 전달하는 데 기여합니다. 이러한 설계와 활용 방식을 통해 쿼리 리라이트 시스템은 더 효과적이고 유용한 정보 제공을 지향하고 있습니다.\n\n📄 참고 문서: langGraph.docx\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.2. 릴러스 체크와 쿼리 리라이트의 중요성\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.7. 쿼리 제작성 모듈의 추가와 기능 설명\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.8. 쿼리 리라이트 시스템의 설계 및 활용	2025-07-30 00:00:00+09	f	8
69	bot	쿼리 리라이트 시스템은 유저가 입력한 원본 질문을 개선하여 보다 명확하고 적합한 질문을 생성하는 과정을 포함합니다. 이 시스템에서는 원본 질문을 그대로 보관하는 것이 중요합니다. 원본 질문을 보여주지 않으면 유저가 질문 내용에 혼란을 느낄 수 있기 때문에 원본을 활용하는 것이 각별히 중요합니다.\n\n리라이트된 질문은 여러 가지 시도를 통해 반복적으로 생성될 수 있으며, 이러한 개선 과정을 기록하여 최신 질문을 활용하는 방식입니다. 쿼리 리라이트 모듈은 정교한 답변 생성을 위한 파이프라인 구조를 적용하여, 리라이트된 결과를 바탕으로 검색 및 관련성 체크를 진행합니다. 최종적으로는 유저가 원하는 형식으로 답변을 제공하는 것이 목표입니다.\n\n또한, 에이전트 시스템을 통해 질문의 적합성을 판단하여 불필요한 검색 과정을 줄이며, 질문이 간단한 경우에는 즉시 답변을 생성하는 등의 효율성을 제공합니다. 마지막으로, 문서 프롬프트를 통해 메타데이터를 포함하여 결과를 제공함으로써, 답변의 출처를 명확히 하고 사용자에게 명확한 정보를 전달하는 데 기여합니다. 이러한 설계와 활용 방식은 더욱 효과적이고 유용한 정보 제공을 목표로 합니다.\n\n📄 참고 문서: langGraph.docx\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.2. 릴러스 체크와 쿼리 리라이트의 중요성\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.7. 쿼리 제작성 모듈의 추가와 기능 설명\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.8. 쿼리 리라이트 시스템의 설계 및 활용	2025-07-30 00:00:00+09	f	8
70	user	쿼리 리라이트 시스템에 대해 알려줘	2025-07-30 00:00:00+09	f	8
72	bot	어서오세요. 무엇을 도와드릴까요?	2025-07-30 00:00:00+09	t	9
74	bot	안녕하세요. 무엇을 도와드릴까요?	2025-07-30 00:00:00+09	t	9
75	user	쿼리 리라이트 시스템에 대해 설명해줘	2025-07-30 00:00:00+09	t	9
77	bot	어서오세요. 무엇을 도와드릴까요?	2025-07-30 00:00:00+09	t	10
79	bot	사원의 복지포인트 제도에 대해 말씀드리겠습니다. 회사는 매년 임직원에게 복지포인트를 부여하며, 이 포인트는 개인 맞춤형 복지에 사용될 수 있습니다. 기본 지급 기준은 직급에 따라 다르며, 다음과 같습니다:\n\n- 사원 ~ 주임: 300,000점\n- 대리 ~ 과장: 400,000점\n- 차장 ~ 부장: 500,000점\n- 임원: 600,000점\n\n이 포인트는 연간 30만 원에서 60만 원 범위 내에서 선택적 복지에 사용 가능하며, 가족 관련 항목으로도 결제할 수 있습니다. 단, 경우에 따라 가족 명의의 영수증과 가족관계 증명서 제출이 필요합니다. 예를 들어, 자녀 교육비나 배우자의 건강검진 비용 등이 인정됩니다.\n\n더 궁금한 점이 있으시면 언제든지 질문해 주세요!\n\n📄 참고 문서: rule_books.pdf\n - 제 4 장  보상  및  복리후생  규정 > 제 5 절  복지포인트  및  선택적  복지제도 > 제 11 조【복지포인트  제도  개요】\n - 제 4 장  보상  및  복리후생  규정 > 제 8 절  보상  및  복리후생  Q&A	2025-07-30 00:00:00+09	t	10
80	user	사원의 복지포인트에 대해 알려줘	2025-07-30 00:00:00+09	t	10
76	bot	쿼리 리라이트 시스템은 사용자가 입력한 원본 질문을 보다 효과적으로 개선하여 더 나은 질문을 생성하는 과정을 포함합니다. 이 시스템은 원본 질문을 그대로 보관하는 것이 중요한데, 이는 유저가 질문 내용에 혼란을 느끼지 않도록 하기 위해서입니다.\n\n리라이트된 질문은 다양한 시도를 통해 반복적으로 생성될 수 있으며, 각각의 질문들에 대한 개선 과정을 기록하여 최신 질문을 활용합니다. 이를 통해 질문의 품질을 향상시킬 수 있습니다.\n\n쿼리 리라이트 모듈은 정교한 답변 생성을 위한 파이프라인 구조에 통합되어, 리라이트된 결과를 바탕으로 검색 및 관련성 체크를 진행합니다. 최종적으로 유저가 원하는 형식으로 답변을 제공하게 됩니다.\n\n또한, 에이전트 시스템을 통해 질문의 적합성을 판단하고 불필요한 검색 과정을 줄이며, 질문이 간단한 경우에는 즉시 답변을 생성하여 효율성을 높입니다. 마지막으로, 도큐먼트 프롬프트를 통해 메타데이터를 포함한 결과를 제공하여 답변의 출처를 명확히 하여 사용자에게 더 신뢰할 수 있는 정보를 전달합니다.\n\n📄 참고 문서: langGraph.docx\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.2. 릴러스 체크와 쿼리 리라이트의 중요성\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.7. 쿼리 제작성 모듈의 추가와 기능 설명\n - 5. 📊 LangGraph의 에이전트 및 도구 사용 흐름 > 4. 🔄 리컬션 리미트와 에러 처리 > 4.8. 쿼리 리라이트 시스템의 설계 및 활용	2025-07-30 00:00:00+09	t	9
78	user	사원의 복지포인트에 대해 알려줘	2025-07-30 00:00:00+09	t	10
81	bot	사원의 복지포인트 제도에 대해 말씀드리겠습니다. 회사는 매년 임직원에게 복지포인트를 부여하며, 이 포인트는 개인 맞춤형 복지에 사용될 수 있습니다. 복지포인트는 직급에 따라 다음과 같이 차등 지급됩니다:\n\n- 사원 ~ 주임: 400,000점\n- 대리 ~ 과장: 500,000점\n- 차장 ~ 부장: 600,000점\n- 임원: 700,000점\n\n이 포인트는 연간 사용 가능 범위 내에서 다양한 선택적 복지 항목에 활용할 수 있으며, 가족 관련 항목으로도 결제할 수 있습니다. 단, 가족 명의의 영수증과 가족관계 증명서 제출이 필요할 수 있습니다. 예를 들어 자녀의 교육비나 배우자의 건강검진 비용 등이 포함될 수 있습니다.\n\n더 궁금한 점이 있으시면 언제든지 말씀해 주세요!\n\n📄 참고 문서: point_new.txt\n - 청크 1	2025-07-30 00:00:00+09	t	10
\.


--
-- Data for Name: core_chatsession; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_chatsession (session_id, summary, is_active, user_id) FROM stdin;
1	상담 내용이 없습니다.	f	15
2	랭그래프는 노드와 엣지로 구성되어 있으며, 데이터 시각화와 관계 관리에 활용됩니다.	f	15
3	랭그래프 구조와 노드 이해 및 요청에 대한 설명.	f	15
4	랭그래프 구조와 노드의 설명.	f	15
5	쿼리 리라이트 시스템 설계 및 활용 설명 요청함.	f	15
6	사원 복지 포인트 제도 설명.	f	15
7	새 대화	f	15
8	쿼리 리라이트 시스템 설계와 활용 방법 안내.	f	15
9	쿼리 리라이트 시스템 설명을 요청함.	t	15
10	사원 복지포인트 제도 안내 - 연간 복지포인트 지급 기준과 사용 방법 설명.	t	15
\.


--
-- Data for Name: core_company; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_company (company_id, company_name) FROM stdin;
111-11-11111	EZFLOW
\.


--
-- Data for Name: core_curriculum; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_curriculum (curriculum_id, curriculum_description, curriculum_title, common, total_weeks, week_schedule, department_id) FROM stdin;
2	설명:\n- 회사의 기본 조직문화를 이해하고 업무 환경에 원활하게 적응할 수 있도록 돕는 종합적인 온보딩 프로그램\n-회사의 역사, 핵심 가치, 업무 프로세스, 그리고 구성원들과의 관계 형성 방법을 단계적으로 학습\n\n직무:\n- 무관 (신입/경력 구분 없음)\n\n주차: \n- 4주\n\n목적:\n- 회사의 조직문화와 핵심 가치를 명확히 이해\n- 업무 환경과 프로세스에 빠른 적응\n- 동료들과의 원활한 관계 형성 및 네트워킹 구축\n- 조직 내에서의 역할과 책임에 대한 명확한 인식	조직문화 이해 및 적응	f	4	1주차:\n- 회사의 역사와 설립 배경 이해\n- 회사의 비전과 미션, 핵심 가치 학습\n- 조직 구조와 주요 부서 소개\n\n2주차:\n- 업무 프로세스와 절차 학습\n- 회사의 주요 제품 및 서비스 이해\n- 내부 커뮤니케이션 도구 및 방법 익히기\n\n3주차:\n- 팀 빌딩 활동 및 동료들과의 관계 형성\n- 멘토링 프로그램 참여 및 네트워킹 구축\n- 갈등 관리 및 문제 해결 전략 학습\n\n4주차:\n- 개인의 역할과 책임 명확히 하기\n- 성과 평가 및 피드백 시스템 이해\n- 지속적인 자기 개발 계획 수립 및 발표	8
\.


--
-- Data for Name: core_department; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_department (department_id, department_name, description, is_active, company_id) FROM stdin;
1	LLM 개발	LLM 개발 부서입니다.	t	111-11-11111
2	페르소나		t	111-11-11111
3	김앤현		t	111-11-11111
4	연구개발		t	111-11-11111
5	펜타스틱		t	111-11-11111
6	EZFLOW		t	111-11-11111
7	오브코스		t	111-11-11111
8	인사관리부서	HR 부서	t	111-11-11111
\.


--
-- Data for Name: core_docs; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_docs (docs_id, title, description, file_path, create_time, common_doc, original_file_name, department_id) FROM stdin;
1	point.txt	복지포인트 제도	C:\\Users\\Playdata\\Desktop\\final_prj\\fast_api\\media\\uploaded_docs\\20250730_021352_point.txt	2025-07-30 02:13:52.578782+09	t	point.txt	8
2	point_new.txt	복지포인트_개정	C:\\Users\\Playdata\\Desktop\\final_prj\\fast_api\\media\\uploaded_docs\\20250730_021404_point_new.txt	2025-07-30 02:14:04.289801+09	t	point_new.txt	8
3	rule_books.pdf	사규 문서	C:\\Users\\Playdata\\Desktop\\final_prj\\fast_api\\media\\uploaded_docs\\20250730_021413_rule_books.pdf	2025-07-30 02:14:13.582927+09	t	rule_books.pdf	8
12	langGraph.docx	랭그래프 문서	C:\\Users\\Playdata\\Desktop\\final_prj\\fast_api\\media\\uploaded_docs\\20250730_031429_langGraph.docx	2025-07-30 03:14:29.841939+09	f	langGraph.docx	6
\.


--
-- Data for Name: core_emailconfig; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_emailconfig (id, email, password, name) FROM stdin;
1	sinipezflow@gmail.com	jgdy jiwk fvez knvz	알림봇
\.


--
-- Data for Name: core_memo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_memo (memo_id, create_date, comment, user_id, task_assign_id) FROM stdin;
1	2025-07-30 03:21:02.081053+09	구현 현황\n- 데이터 수집 및 전처리의 기본적인 이해와 실습을 통해 웹 스크래핑, API 호출, 데이터 탐색 및 품질 점검, 전처리 과정을 수행했습니다.\n\n우수한 점\n1. 웹 스크래핑과 API 호출을 통해 다양한 데이터 수집 방법을 실습한 점이 돋보입니다. BeautifulSoup와 Selenium을 활용한 웹 데이터 추출과 requests 라이브러리를 통한 API 데이터 수집은 실무에서 매우 유용한 기술입니다.\n2. 데이터 품질 점검에서 결측값 처리, 중복 제거, 이상치 탐지 등 기본적인 데이터 클리닝 절차를 충실히 수행한 점이 긍정적입니다. 특히, 데이터 품질이 분석 결과에 미치는 영향을 인식하고 주요 이슈를 메모로 정리한 점이 좋습니다.\n\n개선 필요사항\n1. 자동화 스크립트 작성 능력 부족 → 웹 스크래핑과 API 호출을 자동화하는 스크립트를 작성해보세요. 이를 통해 반복적인 데이터 수집 작업을 효율화할 수 있습니다. Python의 스케줄링 라이브러리인 schedule이나 cron job을 활용해보세요.\n2. 문자열 인코딩 문제와 다중 결측치 처리 능력 강화 필요 → 다양한 인코딩 문제를 해결하기 위해 Python의 codecs 모듈을 학습하고, 다중 결측치를 처리하는 다양한 방법(예: KNN imputation)을 실습해보세요.\n3. 대용량 데이터 전처리 최적화 부족 → Pandas의 효율적인 사용법과 함께 Dask, Vaex 같은 라이브러리를 학습하여 대용량 데이터 처리 능력을 향상시키세요.\n\n성장 방향 제언\n- 실시간 데이터 스트리밍 환경에서의 데이터 수집 및 전처리 자동화 구현을 목표로 삼아보세요. Kafka와 같은 도구를 활용하여 실시간 데이터 파이프라인을 구축하는 경험을 쌓는 것이 좋습니다.\n\n종합 평가\n- 신입사원으로서 데이터 수집 및 전처리의 기본적인 이해와 실습을 충실히 수행하였습니다. 실무 적용성을 높이기 위해 자동화 및 대용량 데이터 처리 능력을 강화할 필요가 있습니다. 일정은 준수하여 업무를 수행하였습니다. 현재 수준에서의 이해도는 양호하며, 지속적인 학습을 통해 실무 역량을 더욱 발전시킬 수 있을 것으로 기대됩니다.	\N	17
3	2025-07-30 03:25:06.09826+09	📋 구현 현황\n- 신입사원은 기본 모델 학습 및 결과 분석을 완료하였으며, 데이터 전처리와 모델 평가를 통해 결과를 도출하였습니다.\n\n👍 우수한 점\n1. 데이터 전처리 과정에서 결측치 처리와 이상치 제거를 적절히 수행하여 데이터의 품질을 높였습니다. 이는 결과의 신뢰성을 높이는 데 기여했습니다.\n2. 모델 선택 과정에서 다양한 알고리즘을 비교하고 최적의 모델을 선택하려는 시도가 돋보였습니다. 이는 문제 해결에 대한 적극적인 접근법을 보여줍니다.\n\n🔧 개선 필요사항\n1. [핵심 개선점] 모델의 하이퍼파라미터 튜닝 부족 → [단계별 해결방법] 다양한 하이퍼파라미터 조합을 시도하고 교차 검증을 통해 최적의 파라미터를 찾는 과정을 추가하세요.\n2. [두 번째 개선점] 결과 분석의 깊이 부족 → [구체적 가이드라인] 모델의 성능을 다양한 지표(예: 정확도, 정밀도, 재현율 등)로 평가하고, 각 지표의 의미를 분석하여 결과를 해석하세요.\n3. [세 번째 개선점] 시각화 부족 → [학습 리소스 제안] 데이터 시각화 라이브러리(예: Matplotlib, Seaborn)를 활용하여 결과를 시각적으로 표현하는 방법을 학습하세요.\n\n💡 성장 방향 제언\n- 다음 단계에서는 모델의 성능을 향상시키기 위한 피처 엔지니어링과 고급 모델링 기법을 학습하여 실무 적용성을 높이는 데 집중하세요.\n\n🧾 종합 평가\n- 신입사원은 기본적인 모델 학습과 결과 분석을 수행할 수 있는 역량을 갖추고 있으며, 데이터 전처리와 모델 선택에서 긍정적인 모습을 보였습니다. 그러나 모델의 성능 최적화와 결과 분석의 깊이를 더할 필요가 있습니다. 일정은 준수하여 업무를 수행하였습니다. 향후 발전 가능성이 높으며, 지속적인 학습을 통해 실무 적용성을 더욱 강화할 수 있을 것으로 기대됩니다.	\N	19
4	2025-07-30 03:25:07.111932+09	구현 현황\n- 신입사원은 LLM 관련 주요 논문과 자료를 리뷰하여 핵심 개념을 이해하고 요약하는 작업을 완료했습니다.\n\n우수한 점\n1. 신입사원은 논문에서 중요한 개념을 명확하게 파악하고 이를 요약하는 데 성공했습니다. 예를 들어, Transformer 모델의 작동 원리를 잘 설명했습니다.\n2. 문제 해결 접근법에서 다양한 자료를 참고하여 폭넓은 이해를 도모한 점이 긍정적입니다. 이는 실무에서의 응용 가능성을 높입니다.\n\n개선 필요사항\n1. [핵심 개선점] 논문 리뷰의 깊이 부족 → [단계별 해결방법] 각 논문의 실험 결과와 그 의미를 더 깊이 분석하고, 이를 실제 사례와 연결 지어 설명하는 연습이 필요합니다.\n2. [두 번째 개선점] 기술적 용어 사용의 부정확성 → [구체적 가이드라인] 기술적 용어의 정의와 사용법을 정확히 이해하고, 이를 문서화하여 반복적으로 검토하는 습관을 기르세요.\n3. [세 번째 개선점] 자료의 출처 및 인용 부족 → [학습 리소스 제안] 학술 자료 인용 방법에 대한 가이드를 참고하여, 모든 자료에 대한 출처를 명확히 표기하는 연습을 하세요.\n\n성장 방향 제언\n- 다음 단계에서는 LLM의 실제 구현 사례를 분석하고, 이를 통해 얻은 통찰을 바탕으로 간단한 프로젝트를 기획해보는 것이 좋습니다. 이를 통해 이론과 실무의 연결고리를 강화할 수 있습니다.\n\n종합 평가\n- 신입사원은 기본적인 이해도를 바탕으로 LLM 관련 자료를 잘 요약했으나, 깊이 있는 분석과 기술적 용어의 정확한 사용이 필요합니다. 향후 발전 가능성은 높으며, 현재 역량 수준은 C 등급으로 평가됩니다. 일정 준수 여부: 업무 수행 중 날짜를 초과하였습니다. 개선이 필요하지만 기본 이해도는 확인되었습니다.	\N	16
5	2025-07-30 03:25:08.44458+09	📋 구현 현황\n- 개발 환경 설정과 필수 도구 설치가 완료되었으며, 기본적인 개발 환경이 구축되었습니다.\n\n👍 우수한 점\n1. 신입사원이 개발 환경을 설정하는 과정에서 명확한 문서를 참고하여 설치를 진행한 점이 돋보입니다. 이는 문서 활용 능력을 잘 보여줍니다.\n2. 문제 발생 시, 온라인 커뮤니티를 활용하여 해결책을 찾는 적극적인 문제 해결 접근법이 긍정적입니다.\n\n🔧 개선 필요사항\n1. [핵심 개선점] 설치 과정에서 발생한 오류를 해결하는 데 시간이 오래 걸렸습니다. → [단계별 해결방법] 오류 메시지를 기록하고, 해당 오류에 대한 구체적인 해결 방법을 문서화하여 다음에 유사한 문제가 발생했을 때 빠르게 대처할 수 있도록 합니다.\n2. [두 번째 개선점] 설치된 도구의 버전 관리가 미흡했습니다. → [구체적 가이드라인] 각 도구의 최신 버전과 호환성을 확인하고, 버전 관리 도구를 사용하여 설치된 버전을 체계적으로 관리합니다.\n3. [세 번째 개선점] 설치된 도구의 기능을 충분히 이해하지 못한 부분이 있습니다. → [학습 리소스 제안] 각 도구의 공식 문서와 튜토리얼을 통해 기능을 심도 있게 학습하고, 실습을 통해 익숙해지도록 합니다.\n\n💡 성장 방향 제언\n- 다음 단계에서는 설치된 도구를 활용하여 간단한 프로젝트를 진행해 보세요. 이를 통해 도구의 실제 사용법과 개발 환경에서의 적용 방법을 체득할 수 있습니다.\n\n🧾 종합 평가\n- 신입사원 수준에서의 전반적 완성도는 B로 평가됩니다. 기본적인 개발 환경 설정은 완료되었으나, 설치 과정에서의 문제 해결 속도와 도구 활용 능력에서 개선의 여지가 있습니다. 향후 발전 가능성은 높으며, 현재 역량 수준은 기본적인 이해도를 갖춘 상태입니다. 일정 준수 여부: 업무 수행 중 날짜를 초과하였습니다.	\N	15
6	2025-07-30 03:25:09.774601+09	📋 구현 현황\n- 신입사원은 LLM의 기본 개념과 역사에 대한 전반적인 이해를 바탕으로 주요 개념을 설명하고, 역사적 발전 과정을 요약했습니다.\n\n👍 우수한 점\n1. LLM의 역사적 발전 과정을 연대기적으로 잘 정리하여, 기술의 진화 과정을 명확히 이해하고 있음을 보여주었습니다.\n2. LLM의 기본 개념을 설명할 때, 구체적인 예시를 들어 이해를 돕는 노력이 돋보였습니다.\n\n🔧 개선 필요사항\n1. [핵심 개선점] LLM의 실무 적용성에 대한 구체적인 사례 부족 → 단계별 해결방법: 실제 기업에서 LLM이 어떻게 활용되고 있는지에 대한 사례 연구를 추가하여 실무 적용성을 높이세요.\n2. [두 번째 개선점] 기술적 세부사항에 대한 이해 부족 → 구체적 가이드라인: LLM의 작동 원리와 알고리즘에 대한 심층적인 학습을 통해 기술적 이해도를 높이세요. 이를 위해 관련 논문이나 기술 문서를 참고하세요.\n3. [세 번째 개선점] 최신 기술 동향 반영 부족 → 학습 리소스 제안: 최신 LLM 기술 동향을 파악하기 위해 AI 관련 컨퍼런스 발표 자료나 최신 연구 논문을 정기적으로 검토하세요.\n\n💡 성장 방향 제언\n- 다음 단계 발전을 위해 LLM의 다양한 응용 분야를 탐구하고, 이를 통해 실무에서의 활용 가능성을 높이는 것이 중요합니다. 특히, 특정 산업에서의 LLM 활용 사례를 연구하여 실무 적용성을 강화하세요.\n\n🧾 종합 평가\n- 신입사원 수준에서의 전반적 완성도는 B로 평가됩니다. 기본 개념과 역사에 대한 이해는 양호하나, 실무 적용성 및 기술적 세부사항에 대한 이해가 더 필요합니다. 향후 발전 가능성은 높으며, 현재 역량 수준은 기본적인 이해도를 갖추고 있습니다. 일정 준수 여부: 업무 수행 중 날짜를 초과하였습니다. 개선이 필요하지만 기본 이해도는 확인되었습니다.	\N	14
7	2025-07-30 03:25:12.413943+09	📋 구현 현황\n- 공공 데이터 포털과 Kaggle에서 텍스트 데이터셋을 성공적으로 수집하였습니다. 이는 모델 학습을 위한 데이터 준비의 첫 단계를 충족합니다.\n\n👍 우수한 점\n1. 다양한 출처에서 데이터를 수집하여 데이터의 다양성과 풍부함을 확보한 점이 돋보입니다. 이는 모델의 일반화 능력을 향상시키는 데 기여할 수 있습니다.\n2. 공공 데이터 포털과 Kaggle이라는 신뢰할 수 있는 플랫폼을 활용하여 데이터의 신뢰성과 품질을 보장하려는 시도가 긍정적입니다.\n\n🔧 개선 필요사항\n1. 데이터 전처리 과정의 구체화 필요 → 수집한 데이터셋의 품질을 높이기 위해 데이터 정제, 중복 제거, 결측치 처리 등의 전처리 과정을 명확히 수행해야 합니다. 이를 통해 데이터의 일관성을 확보할 수 있습니다.\n2. 데이터셋의 목적 적합성 검토 → 수집한 데이터셋이 모델 학습 목적에 부합하는지 검토하고, 필요시 추가적인 데이터 수집이나 필터링을 통해 목적에 맞는 데이터셋을 구성해야 합니다.\n3. 데이터셋의 메타데이터 관리 → 수집한 데이터셋의 출처, 수집 날짜, 데이터의 특성 등을 체계적으로 기록하여 데이터 관리의 효율성을 높일 수 있습니다. 이를 위해 데이터 관리 툴이나 스프레드시트를 활용할 수 있습니다.\n\n💡 성장 방향 제언\n- 데이터 전처리 및 탐색적 데이터 분석(EDA) 기술을 심화 학습하여, 수집한 데이터셋의 품질을 높이고, 데이터의 패턴과 특성을 파악하는 능력을 키우는 것이 중요합니다.\n\n🧾 종합 평가\n- 신입사원으로서 데이터 수집의 기본적인 이해도와 실행력을 보여주었습니다. 향후 데이터 전처리 및 분석 능력을 강화한다면, 실무 적용성이 더욱 높아질 것입니다. 일정은 준수하여 업무를 수행하였습니다. 전반적으로 성장 잠재력이 높으며, 지속적인 학습을 통해 역량을 강화할 수 있을 것으로 기대됩니다.	\N	18
8	2025-07-30 03:25:12.847264+09	📋 구현 현황\n- 하이퍼파라미터 튜닝 기법을 적용하여 모델 성능을 최적화하려는 시도가 있었으며, 랜덤 서치와 그리드 서치 방법을 사용하여 다양한 파라미터 조합을 테스트하였습니다.\n\n👍 우수한 점\n1. 구현 과정에서 랜덤 서치와 그리드 서치의 장단점을 비교하여 적절히 활용한 점이 돋보입니다. 특히, 랜덤 서치를 통해 초기 탐색 범위를 넓히고, 그리드 서치를 통해 세부 조정을 시도한 점이 효과적이었습니다.\n2. 문제 해결 접근법에서 데이터 전처리와 모델 평가 지표를 명확히 설정하여 튜닝의 효과를 객관적으로 평가한 점이 긍정적입니다.\n\n🔧 개선 필요사항\n1. [핵심 개선점] → 하이퍼파라미터 튜닝의 결과를 시각화하여 각 파라미터가 모델 성능에 미치는 영향을 명확히 분석할 필요가 있습니다. 이를 위해 파라미터 값과 성능 지표를 그래프로 표현하여 인사이트를 도출하세요.\n2. [두 번째 개선점] → 튜닝 과정에서 사용한 데이터셋의 크기와 다양성을 고려하여, 과적합을 방지하기 위한 교차 검증 기법을 추가로 적용해 보세요. K-폴드 교차 검증을 통해 모델의 일반화 성능을 평가하는 것이 좋습니다.\n3. [세 번째 개선점] → 베이지안 최적화와 같은 고급 튜닝 기법을 학습하여 적용해 보세요. 이를 통해 더 효율적인 탐색이 가능하며, 관련 자료로는 "Bayesian Optimization in Machine Learning" 논문을 추천합니다.\n\n💡 성장 방향 제언\n- 다음 단계에서는 자동화된 머신러닝(AutoML) 도구를 활용하여 하이퍼파라미터 튜닝을 자동화하고, 다양한 모델을 비교하는 경험을 쌓는 것이 좋습니다. 이를 통해 더 넓은 시야에서 모델 최적화를 이해할 수 있을 것입니다.\n\n🧾 종합 평가\n- 신입사원 수준에서 하이퍼파라미터 튜닝 기법에 대한 기본적인 이해와 적용 능력을 보여주었습니다. 다만, 고급 기법의 활용과 결과 분석의 깊이를 더할 필요가 있습니다. 일정은 준수하여 업무를 수행하였습니다. 향후 발전 가능성이 높으며, 현재 역량 수준에서 꾸준한 학습과 실습을 통해 더욱 성장할 수 있을 것으로 기대됩니다.	\N	20
9	2025-07-30 03:25:18.352762+09	📋 구현 현황\n- 팀별 프로젝트 주제를 선정하는 과정에서 신입사원은 다양한 아이디어를 수집하고, 이를 체계적으로 정리하여 최종 주제를 결정하는 접근법을 사용했습니다.\n\n👍 우수한 점\n1. 신입사원은 다양한 팀원들의 의견을 적극적으로 수렴하여 주제 선정 과정에 반영했습니다. 이는 팀워크와 커뮤니케이션 능력을 잘 보여줍니다.\n2. 문제 해결을 위해 브레인스토밍 세션을 주도하고, 이를 통해 창의적인 아이디어를 도출한 점이 긍정적입니다.\n\n🔧 개선 필요사항\n1. 주제 선정의 구체적인 기준이 부족했습니다. → 주제 선정 시 명확한 평가 기준을 설정하고, 이를 바탕으로 아이디어를 평가하는 단계별 접근법을 제안합니다.\n2. 프로젝트 주제의 실무 적용성이 다소 부족했습니다. → 실무에서의 활용 가능성을 높이기 위해, 현재 산업 트렌드와의 연관성을 조사하고 반영하는 가이드라인을 제공합니다.\n3. 아이디어 정리 및 문서화 과정이 미흡했습니다. → 효과적인 문서화 방법을 학습할 수 있는 리소스를 제안합니다, 예를 들어, '효과적인 비즈니스 문서 작성법' 관련 온라인 강의를 추천합니다.\n\n💡 성장 방향 제언\n- 다음 단계에서는 프로젝트 주제의 실무 적용성을 높이기 위해, 관련 분야의 최신 동향을 지속적으로 학습하고, 이를 프로젝트에 반영하는 능력을 키우는 것이 중요합니다.\n\n🧾 종합 평가\n- 신입사원은 팀워크와 커뮤니케이션 측면에서 우수한 역량을 보였으며, 문제 해결을 위한 적극적인 자세가 돋보입니다. 다만, 실무 적용성을 높이기 위한 추가적인 학습이 필요합니다. 일정은 준수하여 업무를 수행하였습니다. 신입사원의 성장 잠재력은 높으며, 지속적인 학습과 개선을 통해 더욱 발전할 수 있을 것으로 기대됩니다.	\N	23
10	2025-07-30 03:25:20.526231+09	📋 구현 현황\n- 프로젝트 계획 수립의 기본적인 틀을 완성하였으며, 주요 마일스톤과 일정 계획을 명확히 제시하였습니다.\n\n👍 우수한 점\n1. 프로젝트의 주요 목표와 마일스톤을 명확히 정의하여 전체적인 방향성을 잘 설정하였습니다. 이는 프로젝트의 성공적인 진행을 위한 중요한 요소입니다.\n2. 문제 해결 접근법에서 리스크 관리 계획을 포함하여 잠재적인 문제를 사전에 식별하고 대응 방안을 마련한 점이 긍정적입니다.\n\n🔧 개선 필요사항\n1. 세부 일정 계획의 구체성 부족 → 각 마일스톤에 대한 세부 작업 목록과 책임자를 명확히 지정하여 일정의 실효성을 높이세요.\n2. 자원 배분 계획의 불충분함 → 프로젝트에 필요한 인력과 자원을 구체적으로 산정하고, 이를 기반으로 한 자원 배분 계획을 수립하세요.\n3. 이해관계자 커뮤니케이션 계획 미흡 → 이해관계자와의 정기적인 커뮤니케이션 채널과 빈도를 설정하고, 이를 통해 프로젝트 진행 상황을 공유하세요. 관련 학습 리소스로는 '프로젝트 관리 커뮤니케이션 전략' 관련 서적을 추천합니다.\n\n💡 성장 방향 제언\n- 프로젝트 관리 소프트웨어 활용 능력을 향상시켜, 보다 효율적인 일정 관리와 자원 배분을 실현할 수 있도록 하세요. 이를 통해 실무 적용성을 높일 수 있습니다.\n\n🧾 종합 평가\n- 신입사원으로서 프로젝트 계획 수립의 기본적인 이해도는 확인되었으며, 전반적인 완성도는 B 수준입니다. 일정 준수 여부는 긍정적으로 평가되며, 향후 자원 관리와 커뮤니케이션 능력 향상을 통해 더욱 발전할 가능성이 큽니다. 개선이 필요하지만 기본 이해도는 확인됨.	\N	24
11	2025-07-30 03:25:20.586101+09	📋 구현 현황\n- 신입사원은 모델 디버깅 및 오류 해결 방법 실습에서 기본적인 디버깅 기법을 적용하여 주요 오류를 해결하는 데 성공했습니다.\n\n👍 우수한 점\n1. 구현 과정에서 문제를 체계적으로 분석하고, 로그를 활용하여 오류의 원인을 정확히 파악한 점이 돋보입니다. 이는 문제 해결의 기초를 잘 이해하고 있음을 보여줍니다.\n2. 디버깅 과정에서 다양한 시도를 통해 문제를 해결하려는 적극적인 자세가 긍정적입니다. 특히, 오류 메시지를 기반으로 한 검색을 통해 유사한 문제의 해결책을 찾아 적용한 점이 인상적입니다.\n\n🔧 개선 필요사항\n1. [핵심 개선점] 디버깅 과정에서의 체계적인 접근 부족 → 문제를 해결할 때는 먼저 문제를 재현하고, 가능한 원인을 목록화한 후, 하나씩 검증하는 체계적인 접근법을 적용해 보세요.\n2. [두 번째 개선점] 코드 주석 및 문서화 부족 → 코드의 각 부분에 대한 주석을 추가하고, 디버깅 과정에서의 시도와 결과를 문서화하여 나중에 참조할 수 있도록 하세요.\n3. [세 번째 개선점] 디버깅 도구 활용 미흡 → PyCharm, Visual Studio Code와 같은 IDE의 디버깅 도구를 활용하여 변수 값 추적 및 코드 흐름을 시각적으로 파악하는 연습을 해보세요. 관련 학습 리소스로는 각 IDE의 공식 문서와 튜토리얼을 추천합니다.\n\n💡 성장 방향 제언\n- 다음 단계에서는 디버깅뿐만 아니라 코드 최적화에도 관심을 가져보세요. 코드의 효율성을 높이는 방법을 학습하면, 문제 해결 능력뿐만 아니라 전반적인 개발 역량도 향상될 것입니다.\n\n🧾 종합 평가\n- 신입사원 수준에서의 전반적 완성도는 B로 평가됩니다. 문제 해결을 위한 기본적인 이해도는 확인되었으나, 체계적인 접근과 도구 활용 측면에서 개선이 필요합니다. 향후 발전 가능성은 높으며, 현재 역량 수준은 평균 이상입니다. 일정은 준수하여 업무를 수행하였습니다.	\N	22
12	2025-07-30 03:25:23.957021+09	📋 구현 현황\n- 신입사원은 향후 개발 계획 및 개인 목표 설정을 위한 기본적인 프레임워크를 완성하였으며, 이를 통해 자신의 경력 개발 방향을 명확히 하고자 하였습니다.\n\n👍 우수한 점\n1. 신입사원은 자신의 장기적인 경력 목표를 명확히 설정하고, 이를 달성하기 위한 구체적인 단기 목표를 수립하였습니다. 이는 목표 설정의 명확성과 실현 가능성을 높이는 데 기여하였습니다.\n2. 문제 해결 접근법에서, 신입사원은 다양한 학습 리소스를 활용하여 자신의 기술적 역량을 강화하려는 노력을 보였습니다. 이는 자기 주도적 학습 태도를 보여주는 긍정적인 부분입니다.\n\n🔧 개선 필요사항\n1. [핵심 개선점] 목표 설정의 구체성 부족 → 목표를 더 구체적이고 측정 가능하게 설정하기 위해 SMART 목표 설정 방법론을 활용하세요. 예를 들어, "프로그래밍 실력 향상" 대신 "3개월 내에 Python을 활용한 프로젝트 2개 완성"과 같이 구체화할 수 있습니다.\n2. [두 번째 개선점] 실무 적용성 강화 필요 → 설정한 목표가 실제 업무와 어떻게 연결되는지 명확히 하세요. 예를 들어, 현재 프로젝트에서 어떤 기술을 적용할 수 있는지 구체적으로 계획을 세우는 것이 좋습니다.\n3. [세 번째 개선점] 학습 리소스의 다양성 부족 → Coursera나 Udemy와 같은 온라인 플랫폼에서 제공하는 다양한 강의를 통해 최신 기술 트렌드를 학습하세요. 특히, 현재 관심 분야와 관련된 최신 기술을 다루는 강의를 추천합니다.\n\n💡 성장 방향 제언\n- 다음 단계에서는 설정한 목표를 주기적으로 검토하고, 목표 달성 여부를 평가하는 과정을 통해 자기 발전을 지속적으로 모니터링하는 것이 중요합니다. 이를 통해 목표 달성의 성과를 확인하고, 필요시 목표를 조정할 수 있습니다.\n\n🧾 종합 평가\n- 신입사원은 자신의 경력 개발을 위한 기본적인 틀을 잘 마련하였으며, 목표 설정에 대한 기본 이해도는 확인되었습니다. 다만, 목표의 구체성과 실무 적용성을 강화할 필요가 있습니다. 일정은 준수하여 업무를 수행하였습니다. 신입사원의 성장 잠재력은 높으며, 지속적인 학습과 목표 관리로 더욱 발전할 수 있을 것으로 기대됩니다.	\N	26
13	2025-07-30 03:25:25.161242+09	📋 구현 현황\n- 신입사원은 성능 평가 및 개선 방법 이해에 대한 기본적인 개념을 잘 이해하고 있으며, 이를 실무에 적용하기 위한 초기 단계를 수행했습니다.\n\n👍 우수한 점\n1. 구현 과정에서 성능 평가의 기본 원칙을 명확히 이해하고, 이를 바탕으로 구체적인 평가 지표를 설정한 점이 돋보입니다. 예를 들어, 문제해결력과 실무 적용성을 평가 지표로 삼아 구체적인 기준을 마련한 것은 긍정적입니다.\n2. 문제 해결 접근법에서 다양한 사례를 분석하여 실무 적용 가능성을 높이려는 시도가 있었습니다. 이는 신입사원의 적극적인 학습 태도를 보여줍니다.\n\n🔧 개선 필요사항\n1. [핵심 개선점] 성능 평가의 실무 적용성 강화 → [단계별 해결방법] 실제 사례를 기반으로 한 시뮬레이션을 통해 평가 지표의 실효성을 검증하고, 피드백 루프를 통해 지속적으로 개선할 수 있는 체계를 마련하세요.\n2. [두 번째 개선점] 문제해결력의 구체적 강화 필요 → [구체적 가이드라인] 문제 해결 과정에서 발생할 수 있는 다양한 변수와 예외 상황을 고려하여, 보다 포괄적인 해결 방안을 마련하는 연습이 필요합니다. 이를 위해 다양한 시나리오를 설정하고, 각 시나리오에 대한 대응 방안을 마련해 보세요.\n3. [세 번째 개선점] 이론과 실무의 균형 잡기 → [학습 리소스 제안] 성능 평가와 관련된 최신 연구 논문이나 업계 보고서를 참고하여, 이론적 배경을 강화하고 이를 실무에 어떻게 적용할 수 있을지 고민해 보세요.\n\n💡 성장 방향 제언\n- 다음 단계 발전을 위해 성능 평가의 결과를 바탕으로 한 피드백 제공 및 개선 계획 수립에 집중하세요. 이를 통해 평가의 실질적인 효과를 극대화할 수 있습니다.\n\n🧾 종합 평가\n- 신입사원 수준에서의 전반적 완성도는 B로 평가됩니다. 기본적인 이해도는 확인되었으며, 실무 적용성을 높이기 위한 추가적인 노력이 필요합니다. 향후 발전 가능성은 높으며, 현재 역량 수준에서의 학습 의지가 돋보입니다. 일정은 준수하여 업무를 수행하였습니다.	\N	21
14	2025-07-30 03:25:30.259876+09	📋 구현 현황\n- 프로젝트 결과 발표 준비가 완료되었으며, 발표 자료의 구성과 시각적 요소에 대한 기술적 접근이 이루어졌습니다.\n\n👍 우수한 점\n1. 발표 자료의 시각적 구성과 정보 전달력이 뛰어납니다. 특히, 데이터 시각화 부분에서 명확하고 직관적인 그래프 사용이 돋보입니다.\n2. 문제 해결 접근법에서 다양한 시각적 도구를 활용하여 청중의 이해를 돕는 노력이 긍정적입니다.\n\n🔧 개선 필요사항\n1. 발표 내용의 논리적 흐름 개선 → 발표 자료의 각 슬라이드가 자연스럽게 연결되도록 스토리라인을 재구성하세요. 이를 위해 발표의 시작과 끝을 명확히 정의하고, 각 슬라이드가 그 흐름에 맞게 배치되도록 조정하세요.\n2. 청중 맞춤형 정보 제공 강화 → 청중의 배경과 관심사를 고려하여, 발표 자료에 포함된 정보의 깊이와 범위를 조정하세요. 예를 들어, 기술적 세부사항이 필요한 경우와 그렇지 않은 경우를 구분하여 자료를 준비하세요.\n3. 발표 연습 부족 → 발표 연습을 통해 시간 관리와 전달력을 향상시키세요. 이를 위해 동료나 멘토 앞에서 모의 발표를 진행하고 피드백을 받아보세요.\n\n💡 성장 방향 제언\n- 발표 스킬 향상을 위해 다양한 발표 기법과 스토리텔링 기법을 학습하세요. 특히, TED 강연이나 유명 발표자들의 영상을 참고하여 발표 스타일을 분석하고 적용해보세요.\n\n🧾 종합 평가\n- 신입사원 수준에서의 전반적 완성도는 B로 평가됩니다. 발표 자료의 시각적 구성은 우수하나, 논리적 흐름과 청중 맞춤형 정보 제공에서 개선이 필요합니다. 향후 발전 가능성은 높으며, 현재 역량 수준은 기본적인 이해도를 갖추고 있습니다. 일정은 준수하여 업무를 수행하였습니다.	\N	25
16	2025-07-30 09:40:41.448318+09	고생 많았어요! 스스로 문제를 해결하며 환경을 잘 구축한 점이 인상적입니다.  오류·해결 방법을 기록해두면 나중에 큰 도움 됩니다.  도구와 패키지 버전 관리는 꼭 해두세요.  설치만 하지 말고, 간단한 예제라도 직접 돌려보면서 익혀보길 추천합니다.  이제 간단한 프로젝트 한 번 실행해보는 걸 목표로 해보세요. 빠르게 배우고, 궁금한 건 언제든 질문하세요! 👍	9	15
17	2025-07-30 09:41:57.890555+09	아주 잘 정리했어요! LLM의 개념, 발전 과정, 주요 아키텍처까지 핵심을 잘 집었고 예시 활용도 명확했습니다.  어려웠던 부분(Transformer의 Self-Attention, 파라미터 업데이트 등)은 실습 예제나 공식 튜토리얼을 병행하면 이해에 큰 도움 됩니다.  궁금한 점(초거대 LLM의 효율성/편향성, RAG 등)은 실제 오픈소스 프로젝트(예: LLaMA, LangChain, RAG 구현 사례) 문서와 논문을 참고하면 감을 잡을 수 있습니다.  실무 적용 사례, 최신 기술 동향은 실사용 기업 사례(AI 에이전트, RAG 시스템, AWS 기반 LLM 서비스 등)나 컨퍼런스 발표 자료를 꾸준히 찾아보면서 자연스럽게 따라잡길 추천합니다.  탄탄한 기초 잡았으니, 이제 작은 실습 프로젝트로 연결해 보면 더 크게 성장할 수 있습니다! 계속 궁금한 점 있으면 주저 말고 질문하세요👍	9	14
18	2025-07-30 09:43:36.100965+09	논문을 정리하면서 이미 중요한 핵심은 잘 짚었지만, 앞으로는  실험 결과가 실제로 무엇을 의미하는지,  기술적 용어를 정확하고 깊이 있게 이해하는지,  구체적 출처와 실제 응용 예시까지 꼼꼼히 덧붙이는 연습  이런 부분들을 보완하면 한 단계 더 성장할 수 있습니다. 지금도 충분히 잘하고 있지만, 앞으로 이론과 실무에서 모두 빛날 수 있도록 조금만 더 파고들어 보세요! 궁금한 점이 생기면 언제든 편하게 물어봐 주세요.	9	16
19	2025-07-30 09:46:20.11615+09	데이터 전처리와 성능 평가 지표(Accuracy, Precision, Recall, F1-score) 분석까지 밸런스 있게 챙긴 점이 좋았습니다.  오분류 분석, 클래스 불균형 원인 진단 등 실무에 필요한 문제 감지와 개선 아이디어도 적극적으로 작성했네요.  추가로 추천하고 싶은 것은  하이퍼파라미터 조합별로 성능이 어떻게 바뀌는지 표나 그래프로 직접 시각화해 보는 것,  결과 분석 과정에서 각 지표별로 어떤 상황에서 의미가 달라지는지도 간단하게 요약해보는 것 입니다.  한 단계만 더 파면 실무와 면접 모두에서 ‘남다른 분석력’을 보여줄 수 있을 거예요. 궁금한 점 있으면 또 언제든 편하게 물어봐 주세요! 👍	9	19
20	2025-07-30 09:49:36.430276+09	데이터셋 준비와 품질 평가 과정을 성실히 수행한 점이 매우 훌륭합니다. 다양한 출처에서 신뢰할 수 있는 데이터를 확보한 점과, 토큰화 및 데이터 분할까지 체계적으로 진행한 점이 특히 인상적입니다.  다만, 멘토로서 몇 가지 조언을 드리자면:  데이터 전처리 과정을 더 구체적으로 문서화하여, 어떤 기준과 절차로 중복 제거, 결측치 처리, 특수문자 정제가 이루어졌는지 명확히 해주세요. 이는 이후 데이터 관리와 재사용에 큰 도움이 됩니다.  데이터셋이 실제 학습 목적과 얼마나 부합하는지 더 면밀히 검토하고, 필요할 경우 추가 수집이나 필터링을 통해 목적에 맞는 데이터셋으로 다듬는 노력이 필요합니다.  수집한 데이터셋의 출처, 수집 시기, 특성 등 메타데이터를 체계적으로 관리하는 습관을 들이면, 데이터 품질과 신뢰성을 유지하는 데 효과적입니다.  데이터 불균형 문제는 매우 중요한 이슈이니, 특정 카테고리 데이터 부족에 대한 대응책(예: 증강, 추가 수집)도 구체적으로 계획하고 실행해 보세요.	9	18
21	2025-07-30 09:50:38.050839+09	하이퍼파라미터 튜닝 기법을 이론과 실제 실습 모두 적극적으로 학습한 점이 좋았습니다. Grid Search, Random Search, Bayesian Optimization의 차이와 활용 맥락을 잘 짚은 것도 인상적이에요.  조금 더 성장하기 위해 아래 부분을 신경 써보세요:  다양한 하이퍼파라미터 실험 결과를 시각화(예: 파라미터별 정확도 변화 그래프)해서 명확한 인사이트를 도출하는 습관을 들이면 좋겠습니다.  아직 수동으로 실험을 진행했다면, Optuna, Ray Tune 같은 튜닝 자동화 프레임워크 사용법을 꼭 익혀보세요. 실무 효율이 크게 올라갑니다.  LLM/딥러닝 분야에선 단순 튜닝 외에 교차 검증·베이지안 최적화 등의 고급 기법을 실제 문제에 적용해 보는 경험이 중요합니다.  기본기는 아주 탄탄하니, 앞으로는 실무 도구 자동화 및 실험 결과 관리, 결과 해석을 더 깊게 연습해보길 추천합니다.	9	20
22	2025-07-30 09:51:47.535227+09	Confusion Matrix, ROC Curve 등 실용적인 도구로 문제 지점과 모델 한계를 파악하려는 시도 역시 매우 긍정적으로 보입니다.  좀 더 성장하려면 아래 사항을 의식적으로 실천해 보면 좋겠습니다.  다양한 평가 지표의 활용 및 해석 단순 Accuracy뿐 아니라 F1-score, AUC 등 여러 지표의 의미를 구체적 예시와 함께 직접 비교·해석하는 습관을 들이세요. 실제 비즈니스 문제나 불균형 데이터 상황에서, 어떤 지표를 우선할지 고민해 보면 더 깊은 인사이트가 생깁니다.  오분류 사례(Confusion Matrix) 분석 단순히 오분류율을 보는 데 그치지 말고, 실제 잘못 예측된 사례들을 샘플링하여 원인을 한 단계 깊게 진단해 보세요. 데이터 편향, 클래스 불균형, 입력 노이즈 등 다양한 요인을 탐구해 보는 것이 실질적인 개선 전략을 세우는 데 유리합니다.  실험 로그와 성능 변화 추적 실험마다 파라미터, 데이터 변경 내역, 주요 성능 기록을 표나 스프레드시트로 정리하고, 변화의 원인을 명확히 남겨두면 개선 방향을 더욱 체계적으로 잡을 수 있습니다.  적용하고 싶은 개선 아이디어(오분류 데이터 분석, 자동화된 튜닝 도구 활용 등)는 아주 좋은 방향입니다. 실제 현업에서도 이런 방법들이 성능 개선의 핵심 루틴이니, 꼭 실습에 녹여내 보세요.	9	21
23	2025-07-30 09:54:20.294403+09	기본적인 에러 상황에서 즉각적으로 원인을 분석하고 해결한 점은 인정합니다. 하지만 한 단계 더 전문적으로 성장하려면 아래 부분을 지적하지 않을 수 없습니다.  오류 재현부터 체계적 원인 파악까지의 “수순”이 부족 에러가 발생했다고 곧장 디버깅만 들어가는 식이 아니라, 반드시 동일 상황을 반복 재현하고(동일 입력, 동일 환경, 랜덤 시드 고정 등), 가능한 원인과 가설을 명확하게 리스트업한 뒤 차례로 반증하는 절차적 접근이 필요합니다. 지금은 그 부분이 체계적으로 설명되지 않았습니다.  로그만 의존하지 말고 도구·시각화 적극 활용 try-except/print/logging에만 만족하지 말고, IDE의 디버거(예: PyCharm, VSCode)의 변수 추적, 중단점, 콜스택 분석 등 단계별 추적 습관을 반드시 길러야 합니다. 또한, 입력·출력·loss 곡선 등은 TensorBoard/Weights & Biases 등 툴로 시각화하면서 “문제 발생 구간”을 직관적으로 포착하는 연습이 아직 부족해서 아쉽습니다.  디버깅 과정 ‘기록’의식 부재 어떤 코드를 바꿨고, 무슨 테스트를 했으며, 그 결과 무엇이 진짜 원인이었는지 최소한의 주석이나 마크다운으로 정리해 뒀는지 보이지 않습니다. 이 부분을 반복하지 않으면 나중에 동일 문제에서 또 길을 잃기 쉽습니다.  에러가 생긴 ‘루프 밖’의 관점도 챙기세요 데이터 전처리, 미세한 하이퍼파라미터, 버전 호환성, fp16 관련 연산 등 “모델 학습 밖”의 요인도 항상 의심 밀도를 높여 문제를 전체적으로 조망하는 습관이 필요합니다.  “대충 되는 데까지”에서 “왜, 어디서, 어떻게”를 끝까지 파고드는 과정이 모범적인 디버깅 습관입니다. 다음엔 디버깅 로그·문서·가설검증 순서를 명확히 보여주듯 기록해 보세요.	9	22
24	2025-07-30 09:55:19.98738+09	선정 기준과 과정의 명확화 단순히 아이디어만 모으는 것에 그치지 않고, 어떤 기준(실행 가능성, 혁신성, 실무 적용성, 팀원 흥미 등)으로 평가했는지 점검하고 명확히 기록해두세요. 이는 프로젝트 진행 중 방향성 유지에 큰 도움이 됩니다.  실무 적용성과 산업 트렌드 연결 RAG와 LLM 기반 온보딩 시스템이 최근 HRTech, 교육 자동화 분야에서 실질적으로 어떻게 적용되고 있는지, 성공/실패 사례나 관련 스타트업 동향까지 한 번 더 조사해보면 프로젝트 완성도가 확실히 높아집니다.  문서화와 소통의 생활화 초기 아이디어, 기준, 토론 결과를 깔끔하게 문서로 정리하고 팀 내에서 공유하는 습관을 들이세요. 나중에 기획/개발/발표까지 전체 과정에서 큰 힘이 됩니다.  이런 실전형 시도를 통해 팀원들 모두가 데이터·AI 기반 솔루션 기획과 협업 경험을 한 단계 업그레이드할 수 있을 거예요.	9	23
25	2025-07-30 09:56:12.98446+09	주요 마일스톤, 역할 분담, 개발 단계별 필요한 활동들이 구체적으로 제시된 점이 매우 좋아요.  더 명확한 실행력을 위해 아래와 같은 보완을 추천합니다.  각 단계별 세부 작업 및 책임자 명확화 단일 역할에 머무르지 말고, 예를 들어 "2주차 – 데이터 전처리: 담당(배정수, 신진슬)", "3주차 – 챗봇 MVP 기능 리스트, 일정: 담당(배정수, 이민정)"처럼 마일스톤별 구체 작업과 실질 책임자를 확정해두세요. 각 주차별 체크리스트로 관리하면 일정 실효성이 높아집니다.  자원(시간/인력/기술) 배분 계획 구체화 예상 소요 시간, 필요 기술(예: AWS 비용, GPU 리소스, 외부 API 등), 가용 인력을 최대한 수치나 표로 정리해두면 실제 일이 몰릴 때 우선순위를 조정하기 쉽습니다.  팀/이해관계자 커뮤니케이션 루틴 명문화 매주 팀 회의(예: 매주 월요일 오전 10시), 중간 리뷰 및 피드백, 문서/진척 공유 채널(Slack, Notion 등)을 명확히 해두세요. 프로젝트 리드가 전체 진행 상황을 한눈에 모니터링할 수 있습니다.  프로젝트 관리 툴 활용 추천 Jira, Trello, Notion 등에서 칸반이나 간트차트로 업무를 시각화하면 진행 상황 확인과 일정 관리가 한결 편해집니다.	9	24
26	2025-07-30 09:57:44.760059+09	목표 구체화 및 SMART화  장기적이고 포괄적인 계획도 중요하지만, "3개월 내 Hugging Face PR 1건 제출", "2개월 이내 온보딩 챗봇 검색응답 정밀도 90% 달성", "매달 기술 블로그 글 2건 작성"처럼 구체적·측정 가능(M)·달성 가능(A)·관련성(R)·기한(T)이 명확한 SMART 목표로 쪼개세요.  실행 플랜과 실무 연계  각 세부 목표가 현재 맡고 있는 실 프로젝트(예: 온보딩 시스템의 기능 고도화, 성능 최적화)와 직접 연결되도록 하고, 목표별 필요 기술·리소스도 미리 리스팅해두면 시행착오를 줄일 수 있습니다.  학습 리소스와 채널 다양화  온라인 강의 플랫폼(Coursera, Udemy, FastCampus 등)에 있는 최신 LLM/RAG, MLOps, 프롬프트 엔지니어링 강좌를 적극 활용해 보세요. 타 분야(UX, 클라우드 등)와의 융합 관점도 의식하면 실무 적용력이 크게 높아집니다.  성과 피드백 및 자기 점검 루틴 만들기  매주 혹은 매달, 달성한 것과 미달성한 것을 체크, 자기 피드백해보세요. 피드백 내용을 Notion, 블로그, 혹은 개인 개발노트로 기록해두면 성장 흔적도 남고, 이후 면접·경력 기술에도 활용할 수 있습니다.  커뮤니티 및 업계 네트워킹 강화  실무자, 오픈소스 기여자, 같은 목표를 가진 동료들과의 교류(AI 스터디, 컨퍼런스, 온라인 밋업 등)를 꾸준히 가져가면, 정보 획득과 동기 유지에 큰 도움이 됩니다.  계획과 목표는 이미 훌륭합니다. 이제 “더 쪼개고, 더 구체적으로, 꾸준히 체크하며” 실행하면 분명 원하는 성장에 한 발 더 다가갈 수 있습니다. 궁금한 점이나 점검이 필요할 때마다 공유해 주세요. 꾸준한 발전을 응원합니다!	9	26
27	2025-07-30 09:58:23.858394+09	1. 논리적 흐름과 스토리라인 강화 시작-전개-정리 구조를 명확히 하세요. 발표의 첫 슬라이드에 “실제 신입사원의 온보딩 문제 사례”를 간단한 에피소드나 데이터와 함께 던져 공감부터 끌어내면 좋습니다.  아키텍처 설명 → 주요 기능 → 데모 → 성과 → 향후 계획까지 단일 시나리오처럼 자연스럽게 연결되도록 슬라이드 순서와 메시지를 점검해 보세요.  2. 청중(심사위원/실무자/동료)에 ‘딱 맞는’ 정보 제공 청중이 기술 백그라운드가 강하다면 RAG/LLM 구조와 기술적 차별점을 한 슬라이드라도 더 깊게 설명하고, 반대로 HR‧비즈니스 담당자 중심이라면 “온보딩 시간 단축‧비용 절감 데이터와 실제 시연”에 초점을 맞추세요.  Q&A 대비에서 실무적 질문(운영비, 데이터 안정성, 서비스 확장성, 보안 등)에 대한 짧고 명쾌한 답변을 미리 정리해두십시오.  3. 시각 자료와 실제 시연 효과 극대화 아키텍처 다이어그램은 단계별(예: 신입 요청 → 검색 → 답변 생성)로 간단하게 순서를 강조할 수 있으면 좋습니다.  UI/숫자 성과 그래프 등은 최대한 최근 데이터, 명확한 Before-After 차이로 구성해 주세요.  4. 팀워크와 협업 경험 강조 결과만 나열하기보다 “어떤 어려움이 있었는지, 어떻게 팀이 협력하며 극복했는지”를 1~2문장으로 각 주요 단계마다 짚어주세요.  각 팀원의 핵심 책임/기여도를 한 슬라이드로 정리하면 팀 프로젝트 발표에서 신뢰도가 높아집니다.  5. 실제 발표 연습과 피드백 팀원끼리 모의 발표를 진행해보고, 시간 초과나 메시지 중복은 없는지 체크하세요.  발표 내용은 되도록 ‘청중이 궁금해할 포인트’ 위주로 재차 점검하면 전달력이 더 올라갑니다.	9	25
\.


--
-- Data for Name: core_mentorship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_mentorship (mentorship_id, mentor_id, mentee_id, start_date, end_date, is_active, curriculum_title, total_weeks, report, url_link) FROM stdin;
2	9	15	2025-07-28	2025-08-24	t	LLM 개발 신입사원 온보딩 프로그램	4	\N	\N
3	2	32	2025-07-16	2025-08-12	f	조직문화 이해 및 적응	4	1) 전체 온보딩 과정 요약: 박근호 멘티는 온보딩 기간 동안 다양한 태스크를 성공적으로 수행하였습니다. 먼저, 회사의 역사 및 설립 배경을 조사하고, 조직의 핵심 가치와 비전을 이해하는 데 집중하였습니다. 이러한 과정을 통해 회사의 전반적인 이해도를 높였으며, 주요 제품 및 서비스에 대한 소개를 통해 회사의 사업 방향을 명확히 파악하였습니다. 또한, 업무 프로세스를 이해하고 부서별 역할과 책임을 학습함으로써 조직 내 자신의 역할을 명확히 하였습니다. 커뮤니케이션 도구 및 플랫폼 사용법을 익히고, 구성원 소개 및 네트워킹을 통해 동료들과의 관계를 형성하였습니다. 조직문화 워크숍과 팀워크 활동에 참여하여 조직문화에 적응하고, 멘토와의 1:1 미팅을 통해 개인적인 피드백을 받았습니다. 마지막으로, 업무 목표를 설정하고 성과 측정 방법을 이해하며, 온보딩 프로그램에 대한 피드백을 제공하였습니다.\n\n2) 주요 성과 및 습득 역량: 박근호 멘티는 온보딩 과정에서 여러 가지 기술적 역량과 협업 능력을 습득하였습니다. 특히, 회사의 역사와 설립 배경을 철저히 조사하여 조직의 핵심 가치와 비전을 명확히 이해하였습니다. 이를 통해 회사의 방향성과 자신의 역할을 명확히 인식하게 되었으며, 주요 제품 및 서비스에 대한 깊이 있는 이해를 바탕으로 업무에 대한 자신감을 얻었습니다. 또한, 커뮤니케이션 도구와 플랫폼을 능숙하게 사용하여 동료들과의 원활한 소통을 이끌어냈습니다. 팀워크 활동과 네트워킹 이벤트에 적극적으로 참여하여 협업 능력을 강화하였으며, 멘토와의 1:1 미팅을 통해 문제 해결 능력을 향상시켰습니다. 이러한 과정에서 박근호 멘티는 자기 주도적으로 학습하고, 시간 관리 능력을 발휘하여 모든 태스크를 기한 내에 완료하였습니다.\n\n3) 개선 필요 사항: 박근호 멘티는 전반적으로 우수한 성과를 보였으나, 몇 가지 개선이 필요한 부분도 발견되었습니다. 첫째, 업무 프로세스 이해에 있어 보다 심층적인 접근이 필요합니다. 현재의 이해 수준을 넘어, 각 부서의 세부적인 업무 흐름과 상호작용을 더 깊이 있게 파악할 필요가 있습니다. 이를 위해 부서 간의 협업 프로젝트에 참여하거나, 각 부서의 업무를 직접 체험해 보는 기회를 가지는 것이 좋겠습니다. 둘째, 네트워킹 활동에서의 적극성을 더욱 강화할 필요가 있습니다. 동료들과의 관계 형성은 잘 이루어졌으나, 보다 다양한 부서의 구성원들과의 교류를 통해 폭넓은 인적 네트워크를 구축하는 것이 중요합니다. 마지막으로, 피드백을 수용하고 이를 바탕으로 자신의 업무 방식을 개선하는 데 있어 보다 적극적인 자세가 필요합니다. 피드백을 단순히 듣는 것에 그치지 않고, 이를 실질적인 행동 변화로 연결시키는 노력이 필요합니다.\n\n4) 종합 평가: 박근호 멘티는 온보딩 과정에서 뛰어난 성실성과 학습 능력을 보여주었습니다. 회사의 역사와 비전을 이해하고, 주요 제품 및 서비스에 대한 깊이 있는 지식을 습득함으로써 조직에 빠르게 적응하였습니다. 또한, 커뮤니케이션 도구를 능숙하게 사용하여 동료들과의 원활한 소통을 이끌어냈으며, 팀워크 활동을 통해 협업 능력을 강화하였습니다. 문제 해결 능력과 자기 주도성 또한 우수하여, 주어진 태스크를 기한 내에 완수하였습니다. 다만, 업무 프로세스에 대한 심층적인 이해와 네트워킹 활동에서의 적극성을 더욱 강화할 필요가 있습니다. 이러한 부분을 개선한다면, 박근호 멘티는 조직 내에서 더욱 큰 성과를 이룰 수 있을 것입니다. 전반적으로 박근호 멘티는 높은 성장 가능성을 지니고 있으며, 앞으로의 발전이 기대됩니다.	http://127.0.0.1:8000/mentee/task_list/?mentorship_id=3&open=final_report
\.


--
-- Data for Name: core_taskassign; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_taskassign (task_assign_id, title, description, guideline, week, scheduled_start_date, scheduled_end_date, real_start_date, real_end_date, status, priority, "order", mentorship_id_id, parent_id) FROM stdin;
27	데이터 수집 기본 이해	1)웹 스크래핑, API 호출, CSV/Excel 파일 등 주요 데이터 수집 경로 파악:\nBeautifulSoup와 Selenium을 활용해 간단한 웹 페이지에서 텍스트 데이터를 추출하는 실습을 진행했습니다.\n공공데이터포털 API를 호출하여 JSON 형식의 데이터를 수집하고, requests 라이브러리로 API 응답을 처리하는 방법을 배웠습니다.\n\n2)공공 데이터 포털, Kaggle 등 데이터셋 활용 사례 조사:\n공공데이터포털에서 기상청 날씨 데이터를 다운로드하고, 이를 간단히 분석해보았습니다.\nKaggle에서 ‘타이타닉 생존자 예측’ 데이터셋을 예제로 사용하여 데이터 구조와 컬럼을 분석했습니다.\n\n3)데이터 수집 시 주의사항(저작권, 품질 등) 정리:\n데이터 수집 전 저작권과 라이선스를 확인하는 것이 중요하다는 점을 학습했습니다.\n웹 스크래핑 시 robots.txt를 준수하고, API 호출 시 Rate Limit을 고려해야 한다는 점을 알게 되었습니다.	다양한 데이터 소스(웹, API, 공공데이터 등)의 특징과 수집 방법을 학습하세요.	2	2025-08-04	2025-08-07	\N	2025-07-30	완료	상	\N	2	17
32	조직의 핵심 가치 및 비전 이해	1) 이해한 핵심 가치:\n2) 비전의 중요성:\n3) 적용 방안:	회사의 핵심 가치와 비전을 학습하고, 이를 어떻게 업무에 적용할 수 있을지 생각해보세요.	1	2025-07-16	2025-07-18	\N	2025-07-30	완료	상	2	3	\N
54	프로그램 평가 참여	1) 프로그램 평가:\n2) 개선할 점:\n3) 긍정적인 점:	온보딩 프로그램 전체에 대한 평가에 참여하여 자신의 경험을 공유	4	2025-08-06	2025-08-07	\N	2025-07-30	완료	중	5	3	\N
19	기본 모델 학습 및 결과 분석	1) 모델 학습 과정:\nHugging Face의 transformers 라이브러리를 사용해 사전 학습된 BERT 기반 분류 모델을 로드하고 파인튜닝을 진행했습니다.\n준비한 데이터셋(Train/Validation/Test)을 토크나이저로 전처리한 뒤, Trainer API를 사용하여 3 epoch 동안 학습을 진행했습니다.\n학습 과정에서 GPU를 활용해 학습 시간을 단축했으며, learning rate와 batch size를 조정해 안정적인 학습 곡선을 얻으려고 시도했습니다.\n\n\n2) 결과 분석:\nValidation 데이터셋에서 모델이 예측한 라벨과 실제 라벨을 비교하여 Accuracy, Precision, Recall, F1-score를 측정했습니다.\nConfusion Matrix를 시각화해 잘못 예측한 클래스의 비율과 원인을 분석했습니다.\n일부 오분류 사례를 직접 확인한 결과, 데이터셋의 문장 길이 편차나 불균형이 성능 저하의 원인이 될 수 있다는 점을 발견했습니다.\n\n3) 성능 평가 및 개선 방안:\n현재 모델은 Validation Accuracy 약 85% 수준으로 준수했지만, 특정 클래스에서 Recall이 낮아 개선이 필요했습니다.\n\n개선 방안:\n데이터 증강(Text Augmentation) 기법을 적용해 데이터 다양성을 확보.\n하이퍼파라미터 튜닝(Grid Search, Learning Rate Scheduler 등)을 통해 최적값을 탐색.\nRoBERTa, DistilBERT 등 다른 Transformer 모델로 실험해 성능 비교.\n불균형 데이터 문제를 해결하기 위해 클래스 가중치 조정 또는 Oversampling을 시도.\n\n	기본 모델을 학습시키고, 결과를 분석하여 모델의 성능을 평가합니다.	2	2025-08-04	2025-08-06	\N	2025-07-30	완료	중	3	2	\N
23	팀별 프로젝트 주제 선정	1) 선정한 주제:\nRAG 기반 온보딩 시스템(SiniP)\n신입사원 교육 과정을하고, LLM과 RAG 기술을 활용하여 맞춤형 온보딩 퀘스트와 실시간 피드백을 제공하는 플랫폼.\n\n2) 주제 선정 이유:\n기존 온보딩 과정의 비효율성과 높은 교육 비용 문제를 해결할 수 있는 실용적인 솔루션이라고 판단했습니다.\nLLM과 RAG를 활용하면 대규모 데이터를 기반으로 실시간 질문 응답과 맞춤형 퀘스트 제공이 가능하여 신입사원의 몰입도와 학습 효율을 높일 수 있습니다.\n\n3) 프로젝트 목표:\n신입사원의 교육 및 적응 과정을 LLM 기반의 지능형 에이전트로 자동화\n 온보딩 데이터를 기반으로 직원의 성장 속도와 적응도에 대한 분석 리포트 생성	팀원들과 협력하여 프로젝트 주제를 선정하고 목표를 설정하세요.	4	2025-08-18	2025-08-19	\N	2025-07-30	완료	상	1	2	\N
31	회사 역사 및 설립 배경 조사	1) 배운 점:\n2) 흥미로웠던 사실:\n3) 추가로 알고 싶은 점:	회사의 설립 배경과 주요 연혁을 조사하고 정리하세요.	1	2025-07-16	2025-07-18	\N	2025-07-30	완료	상	1	3	\N
28	수집 데이터 탐색 및 품질 점검	1)데이터 형태(정형/비정형), 컬럼 및 데이터 타입 확인:\n수집한 데이터셋을 pandas.DataFrame 형태로 불러와 .info()와 .head()를 통해 데이터 구조와 컬럼 정보를 확인했습니다.\n데이터 타입(int, float, object 등)을 검토하여 수치형과 범주형 컬럼을 구분하고, 분석에 적합한 타입으로 변환하는 실습을 진행했습니다.\n\n2)결측값, 중복 데이터, 이상치 탐지 방법 실습:\n.isnull().sum()으로 컬럼별 결측값 수를 확인하고, 평균 대체(fillna)와 결측행 제거(dropna)를 실습했습니다.\n.duplicated()로 중복 데이터를 찾아내고, 필요 시 .drop_duplicates()를 통해 제거했습니다.\n\n3)품질 저하 요소(오타, 비일관성 등) 파악 및 메모:\n텍스트 컬럼에서 불필요한 공백, 오타, 대소문자 불일치 등을 확인하고 str.lower(), strip(), replace() 등을 사용해 정제했습니다.\n카테고리 데이터에서 중복된 표현(예: ‘Seoul’ vs ‘SEOUL’)을 통일하여 데이터 품질을 높였습니다.\n전체적으로 데이터 품질이 분석 결과에 큰 영향을 준다는 점을 깨닫고, 주요 이슈들을 메모로 정리했습니다.	수집된 데이터의 구조와 품질을 확인하고, 이상치나 결측값을 탐색하세요.	2	2025-08-04	2025-08-07	\N	2025-07-30	완료	상	\N	2	17
29	데이터 전처리 실습	1)결측값 처리(삭제, 평균 대체 등) 및 중복 제거:\n웹 스크래핑(BeautifulSoup, Selenium)과 API 호출 방식의 차이를 이해하고, JSON·CSV 데이터 구조를 직접 불러오는 과정을 실습했습니다.\n수집된 데이터를 전처리하기 위해 결측값 처리, 중복 제거, 이상치 탐지 등 필수적인 데이터 클리닝 절차를 배웠습니다.\n\n2)범주형 데이터 인코딩, 정규화/표준화 적용:\n다양한 데이터 소스(API, 웹, 크롤링 등)에서 데이터를 효율적으로 수집하는 자동화 스크립트 작성 능력이 부족하다고 느꼈습니다.\n전처리 과정에서 특정 상황(예: 문자열 인코딩 문제, 다중 결측치 처리)에 대한 대처 능력을 더 강화할 필요가 있습니다.\n\n3)전처리 후 데이터셋 저장 및 버전 관리 방법 기록:\n대용량 데이터(수백 MB~GB 단위) 전처리를 위한 최적화 방법과 효율적인 파이프라인 설계 기법을 알아보았습니다.\n실시간 데이터 스트리밍(API, Kafka 등) 환경에서 수집 및 전처리 자동화를 구현하는 방법을 학습했습니다.	데이터 분석 및 모델링을 위한 전처리 기법을 실습하세요.	2	2025-08-04	2025-08-07	\N	2025-07-30	완료	상	\N	2	17
14	LLM 기본 개념 및 역사 이해	1) 배운 점:\nLLM(Large Language Model)이란 방대한 양의 텍스트 데이터를 학습해 인간과 유사한 자연어 이해와 생성 능력을 가진 AI 모델임을 알게 되었습니다.\nGPT, BERT, LLaMA 등의 대표적인 LLM 아키텍처와, Transformer 구조(Self-Attention 메커니즘)의 중요성을 학습했습니다.\nLLM 발전 과정에서 RNN → LSTM → Transformer로 이어지는 자연어 처리 기술의 진화 흐름과, 대규모 데이터 및 GPU 연산이 모델 성능 향상에 중요한 역할을 했음을 이해했습니다.\n\n2) 이해가 어려웠던 부분:\nTransformer의 **Self-Attention 연산 과정(쿼리, 키, 밸류 계산)**이 처음에는 직관적으로 이해하기 어려웠습니다.\nPre-training과 Fine-tuning 과정에서 사용하는 손실 함수 및 파라미터 업데이트 과정이 복잡하게 느껴졌습니다.\nLLM이 문맥을 이해하고 다음 단어를 예측하는 원리(확률 기반 토큰 예측)가 수식 중심으로 설명될 때 조금 난해했습니다.\n\n\n3) 추가로 궁금한 점:\nLLM이 수백억 개 이상의 파라미터를 가진 초거대 모델일 때, 실제로 메모리나 연산 효율성을 어떻게 확보하는지 궁금합니다.\nLLM이 최신 정보(실시간 데이터)를 반영하기 위해 RAG(검색 증강 생성)나 지속적인 학습을 어떻게 활용하는지 알고 싶습니다.\nLLM의 편향성(Bias) 문제와 이를 최소화하기 위한 기술적 접근 방법(예: RLHF, 데이터 정제)이 어떤 방식으로 구현되는지 더 깊이 학습하고 싶습니다.\n\n	LLM의 기본 개념과 발전 과정을 학습하고, 주요 용어와 기술을 이해합니다.	1	2025-07-28	2025-07-30	\N	2025-07-30	완료	상	1	2	\N
15	개발 환경 설정 및 필수 도구 설치	1) 설치한 도구 목록:\nPython 3.10 환경: LLM 개발에 필요한 패키지 설치를 위해 Anaconda 가상환경을 만들고 Python 버전을 설정했습니다.\n필수 라이브러리: transformers, datasets, torch, accelerate, langchain 등을 설치했습니다.\n개발 툴: Visual Studio Code(VSCode), Jupyter Notebook, Git 및 GitHub Desktop을 설치해 협업과 버전 관리를 준비했습니다.\n\n\n2) 설치 과정에서의 어려움:\nWindows 환경에서 CUDA 버전과 PyTorch 버전이 호환되지 않아 설치가 실패하는 문제가 있었습니다.\n일부 라이브러리(예: transformers)가 Python 기본 환경에 충돌을 일으켜 패키지 의존성 문제가 발생했습니다.\nJupyter Notebook이 새로 만든 가상환경을 인식하지 못하는 문제가 있었습니다.\n\n3) 해결 방법:\nPyTorch 공식 사이트에서 CUDA 버전 호환표를 참고해 정확한 버전을 재설치했습니다.\npip 대신 conda install을 활용하거나, pip install --upgrade 옵션으로 패키지 버전을 조정해 의존성 충돌을 해결했습니다.\nipykernel을 가상환경에 설치하고 python -m ipykernel install --user --name <env_name> 명령으로 Jupyter 커널을 추가했습니다.\n\n	LLM 개발에 필요한 소프트웨어 및 도구를 설치하고 설정합니다.	1	2025-07-28	2025-07-30	\N	2025-07-30	완료	상	2	2	\N
20	하이퍼파라미터 튜닝 기법 학습	1) 배운 점:\n하이퍼파라미터가 모델 성능에 큰 영향을 미친다는 점을 다시 확인했습니다. (예: Learning Rate, Batch Size, Epoch 수 등)\nGrid Search, Random Search, Bayesian Optimization과 같은 튜닝 방법의 차이를 배웠습니다.\nGrid Search는 모든 조합을 탐색해 최적 값을 찾지만 연산 비용이 큼.\nRandom Search는 랜덤 샘플링으로 연산 효율이 높음.\nBayesian Optimization은 이전 결과를 기반으로 더 나은 파라미터 후보를 탐색함.\n\n2) 개선할 점:\n다양한 하이퍼파라미터가 동시에 변할 때 성능 변화를 체계적으로 비교하기 어려웠습니다.\n파라미터 튜닝을 자동화하지 못하고 수동으로 실험하다 보니 실험 로그 관리가 부족했습니다.\nGPU 메모리 제한 때문에 Batch Size를 자유롭게 조절하기 어려웠습니다.\n\n\n3) 추가로 궁금한 점:\n실제 산업 환경에서 하이퍼파라미터 튜닝을 자동화하기 위해 사용하는 도구(예: Optuna, Ray Tune)의 활용법이 궁금합니다.\nLLM 파인튜닝에서 중요한 파라미터(예: LoRA 랭크, 학습률 스케줄링)는 어떻게 최적화하는지 더 배우고 싶습니다.\nAutoML(Auto Hyperparameter Tuning) 방식과 Bayesian Optimization을 결합했을 때 성능 차이가 있는지 궁금합니다.\n\n	하이퍼파라미터 튜닝의 기본 개념을 이해하고 다양한 기법을 학습합니다.	3	2025-08-11	2025-08-13	\N	2025-07-30	완료	상	1	2	\N
21	성능 평가 및 개선 방법 이해	1) 배운 점:\nAccuracy, Precision, Recall, F1-score 등 다양한 지표의 특성과 활용 목적을 이해했습니다.\nConfusion Matrix를 통해 모델의 오분류 패턴을 확인하고 문제 영역을 파악하는 방법을 배웠습니다.\nROC Curve와 AUC를 활용하면 모델의 분류 한계와 민감도를 비교 분석할 수 있음을 알게 되었습니다.\n성능 향상에는 데이터 품질 관리, 하이퍼파라미터 최적화, 앙상블 기법 등 다양한 접근법이 필요하다는 것을 배웠습니다.\n\n2) 개선할 점:\n평가 지표를 단순 Accuracy 중심으로 해석하는 습관이 있어, 다양한 지표를 종합적으로 분석하는 연습이 더 필요합니다.\n모델의 잘못된 예측 사례(오분류 데이터)를 충분히 분석하지 못해 원인 파악이 미흡했습니다.\n실험 로그(성능 기록)를 체계적으로 관리하지 않아, 파라미터 변경 시 어떤 요소가 성능 개선에 영향을 주었는지 명확히 추적하기 어려웠습니다.\n\n3) 적용해보고 싶은 방법:\nConfusion Matrix 기반으로 오분류 데이터만 따로 분석하여 데이터 보강(Data Augmentation) 시도를 해보고 싶습니다.\n하이퍼파라미터 튜닝을 위한 자동화 도구(Optuna, GridSearchCV 등)를 적용하여 성능 개선 정도를 비교하고 싶습니다.	모델의 성능을 평가하는 방법을 배우고, 개선할 수 있는 전략을 탐구합니다.	3	2025-08-11	2025-08-13	\N	2025-07-30	완료	상	2	2	\N
22	모델 디버깅 및 오류 해결 방법 실습	1) 배운 점:\n모델 학습 중 발생하는 오류는 데이터 전처리 문제, 파라미터 설정 오류, 라이브러리 버전 호환성 문제 등 다양한 원인에서 비롯될 수 있다는 것을 배웠습니다.\ntry-except 구문을 활용한 예외 처리와 logging 모듈을 사용해 오류 원인을 추적하는 방법을 실습했습니다.\n학습 중간에 손실 값(loss)이 NaN으로 변하는 경우, 학습률(learning rate)을 낮추거나 입력 데이터의 정규화를 점검해야 한다는 점을 알게 되었습니다.\n\n2) 해결한 오류:\n데이터 차원 불일치 오류: 입력 데이터의 shape이 모델의 예상과 맞지 않아 RuntimeError: size mismatch가 발생했는데, 데이터 로더에서 텐서 차원을 맞춰 해결했습니다.\nCUDA 메모리 부족 문제: Batch Size를 줄이고 torch.cuda.empty_cache()를 실행해 메모리를 확보한 뒤 학습을 재개했습니다.\n\n3) 추가로 시도해보고 싶은 방법:\npdb나 ipdb 디버거를 활용하여 모델 내부 레이어의 출력을 단계별로 확인하고 싶습니다.\n모델 학습 과정을 시각화하는 도구(TensorBoard, Weights & Biases)를 사용해 에러 발생 지점을 더 직관적으로 파악해 보고 싶습니다.\n\n	모델 디버깅의 중요성을 이해하고, 실제 오류를 해결하는 방법을 실습합니다.	3	2025-08-11	2025-08-14	\N	2025-07-30	검토요청	상	3	2	\N
16	LLM 관련 주요 논문 및 자료 리뷰	1) 읽은 논문/자료 제목:\nAttention Is All You Need (Vaswani et al., 2017)\nLanguage Models are Few-Shot Learners (Brown et al., 2020)\nHugging Face Transformers 공식 문서 및 튜토리얼\n\n2) 핵심 내용 요약:\nAttention Is All You Need:\n기존 RNN과 LSTM의 한계를 극복하기 위해 Transformer 모델이 등장했으며, Self-Attention 메커니즘을 기반으로 병렬 연산이 가능해져 학습 속도와 성능이 크게 향상됨을 알게 되었습니다.\nPosition Encoding을 통해 순서 정보를 보완하는 방법이 흥미로웠습니다.\n\nLanguage Models are Few-Shot Learners:\nGPT-3의 Few-Shot, Zero-Shot, One-Shot 학습 능력을 다양한 벤치마크 실험을 통해 보여주었고, 사전 학습(Pre-training)의 중요성을 강조하고 있음을 확인했습니다.\n\nHugging Face 문서:\ntransformers 라이브러리의 다양한 모델 로딩, 파인튜닝 예제를 통해 실무에서 LLM을 쉽게 활용하는 방법을 배웠습니다.\n\n3) 인상 깊었던 점:\nTransformer 모델이 단순히 Attention 구조만으로 RNN 계열 모델들을 완전히 대체하고 NLP 분야의 패러다임을 바꿨다는 점이 인상 깊었습니다.\nGPT-3 논문에서 보여준 Few-Shot Learning의 성능은 사전 학습된 대규모 모델의 잠재력을 잘 보여줬고, 앞으로 LLM 기술이 더욱 발전할 가능성을 느꼈습니다.\nHugging Face 생태계가 LLM을 실무에 적용하는 진입 장벽을 크게 낮춰준다는 점이 유용하게 다가왔습니다.\n\n	주요 논문과 자료를 읽고, 핵심 내용을 요약합니다.	1	2025-07-28	2025-07-29	\N	2025-07-30	완료	중	3	2	\N
26	향후 개발 계획 및 개인 목표 설정	1) 향후 개발 계획:\n기능 고도화: 현재 MVP 수준의 기능(온보딩 퀘스트 관리, RAG 기반 챗봇)을 보완하여 실무 적용 가능한 수준으로 개선할 계획입니다.\n성능 최적화: RAG 검색 속도 및 LLM 응답 정확도를 높이기 위해 벡터DB 인덱스 구조를 개선하고, 프롬프트 최적화 및 캐싱 전략을 도입할 예정입니다.\n테스트 자동화: 단위 테스트 및 통합 테스트 자동화 파이프라인을 구축하여 배포 안정성을 확보할 계획입니다.\n추가 기능 구현: 관리자 분석 리포트, 온보딩 데이터 시각화, 멘토링 피드백 자동 생성 기능을 개발할 예정입니다.\n\n2) 개인 목표:\nLLM과 RAG 기술을 더 깊게 학습하여 LLM 기반 서비스 개발 전문가로 성장하고 싶습니다.\n오픈소스 프로젝트(예: Hugging Face, LangChain)에 기여하거나, 기술 블로그를 통해 학습 경험을 공유할 계획입니다.\n프로젝트 관리 능력을 키워, 단순 개발뿐만 아니라 팀 리딩과 기획 역량을 함께 발전시키고 싶습니다.\n\n3) 목표 달성을 위한 전략:\n매주 기술 학습 목표를 세워 LLM, 벡터DB, 프롬프트 엔지니어링 관련 튜토리얼과 논문을 꾸준히 공부합니다.\n개인 GitHub에 학습한 예제 및 미니 프로젝트를 정리하여 포트폴리오를 강화합니다.\n온라인 세미나나 AI 스터디 모임에 참여하여 최신 기술 동향을 파악하고 실무 적용 사례를 배우려고 합니다.	향후 개발 계획을 수립하고 개인 목표를 설정하세요.	4	2025-08-18	2025-08-19	\N	\N	검토요청	중	4	2	\N
30	공공 데이터 포털과 Kaggle에서 텍스트 데이터셋을 수집	공공 데이터 포털과 Kaggle에서 텍스트 데이터셋을 수집하였습니다.		2	2025-08-04	2025-08-06	\N	2025-07-30	완료	상	\N	2	18
24	프로젝트 계획 수립	1) 주요 작업 목록:\n요구사항 분석 및 기획: 프로젝트 목표 정의, 핵심 기능 선정, 기술 스택 확정.\n데이터 수집 및 전처리: 온보딩 관련 문서, FAQ 데이터, HR 규정 등 RAG 학습용 데이터 준비.\n백엔드 개발: FastAPI와 Django를 기반으로 한 API 서버 구축 및 데이터베이스 설계(PostgreSQL).\nLLM/RAG 연동: LangChain과 Qdrant를 이용해 문서 검색 및 QA 챗봇 구현.\n프론트엔드/UX 설계: 온보딩 UI(퀘스트 시스템, 대시보드 등) 개발.\n테스트 및 디버깅: 기능별 단위 테스트 및 사용자 피드백 반영.\n배포 및 문서화: AWS EC2 환경에서 서비스 배포, 기술 문서 및 발표 자료 작성.\n\n2) 작업 일정:\n1주차: 프로젝트 기획 완료 및 요구사항 명세서 작성.\n2주차: 데이터 수집 및 전처리, 백엔드 초기 구조 개발.\n3주차: LLM/RAG 연동 및 챗봇 MVP 개발.\n4주차: 프론트엔드 UI/UX 설계 및 API 연동.\n5주차: 통합 테스트, 성능 최적화, 피드백 반영.\n6주차: 최종 배포 및 발표 준비.\n\n3) 역할 분담:\nPM(성호진): 프로젝트 전체 일정 관리 및 요구사항 조율.\n백엔드(신진슬,이민정): FastAPI, Django, DB 설계 및 API 개발.\n프론트엔드(방성일): UI/UX 디자인 및 프론트 구현.\nAI/데이터(배정수): LLM 모델 연동, RAG 구축, 데이터 전처리 및 평가.\n테스트/문서화(팀원 전체): 통합 테스트, 최종 발표 자료 및 보고서 작성.\n\n	프로젝트 진행을 위한 세부 계획을 수립하세요.	4	2025-08-18	2025-08-19	\N	2025-07-30	완료	상	2	2	\N
17	데이터 수집 및 전처리 방법 학습	1) 배운 점:\n웹 스크래핑(BeautifulSoup, Selenium)과 API 호출 방식을 비교해 보고, 실제로 JSON·CSV 데이터를 불러오는 실습을 해보며 데이터 수집 과정을 익혔습니다.\n공공데이터포털과 Kaggle에서 데이터를 다운로드해 구조와 컬럼을 분석하면서 다양한 데이터 소스 활용 방법을 배웠습니다.\npandas를 활용해 결측값, 중복값, 이상치를 탐지하고 처리하는 방법을 실습하며 데이터 품질 관리의 중요성을 느꼈습니다.\n범주형 데이터 인코딩과 수치 데이터 정규화/표준화를 직접 적용해 보면서 전처리의 효과를 이해했습니다.\n\n2) 개선할 점:\n웹 스크래핑 및 API 호출을 자동화하는 스크립트 작성 능력이 아직 부족하다고 느꼈습니다.\n전처리 과정에서 인코딩 문제나 특수 문자 처리 같은 예외 상황을 다루는 능력을 더 보완할 필요가 있습니다.\nEDA(탐색적 데이터 분석)를 통한 데이터 시각화와 패턴 파악 과정을 더 깊게 연습해야겠다고 생각했습니다.\n\n3) 추가로 알고 싶은 내용:\n대용량 데이터셋(수백 MB 이상)을 효율적으로 처리하는 최적화된 전처리 기법과 파이프라인 구성 방법.\n실시간 데이터 수집 환경(API, Kafka 등)에서 전처리를 자동화하는 방법.\n머신러닝 모델에 적합한 형태로 데이터를 변환하기 위한 고급 전처리와 피처 엔지니어링 기법.\n\n	다양한 데이터 소스에서 데이터를 수집하고, 전처리 과정을 통해 데이터를 정제하는 방법을 학습합니다.	2	2025-08-04	2025-08-07	\N	2025-07-30	완료	상	1	2	\N
25	프로젝트 결과 발표 준비	1) 발표 자료 개요:\n프로젝트 개요: 프로젝트 목표, 문제 정의, 개발 동기 및 필요성 소개.\n시스템 아키텍처: LLM + RAG 기반 구조, 사용한 기술 스택(FastAPI, Qdrant, LangChain 등) 설명.\n주요 기능: 게온보딩 퀘스트 시스템, 실시간 Q&A 챗봇, 관리자 대시보드 소개.\n데모 영상 및 시연: 프로그램 동작 과정 시연(신입사원 온보딩 흐름).\n성과 및 기대효과: 온보딩 기간 단축 효과, HR 업무 효율화, 팀 협업 결과.\n향후 개선방향: 기능 확장 및 서비스 안정화 계획.\n\n2) 주요 성과:\nRAG 기반 온보딩 Q&A 챗봇을 완성하여 실시간 질의응답 기능을 구현했습니다.\n퀘스트 기반 UI를 통해 신입사원 교육 과정을 제작하여 사용자 몰입도를 높였습니다.\nAWS EC2 환경에서 프로젝트 배포까지 완료하여 실제 서비스 가능한 형태로 제공했습니다.\n팀원 간 협업을 통해 데이터 수집-모델링-프론트/백엔드 개발-배포까지 전 과정을 경험했습니다.\n\n3) 발표 전략:\n스토리텔링 중심 발표: 신입사원의 실제 온보딩 문제 상황을 사례로 시작해 공감대 형성.\n시각자료 활용: 아키텍처 다이어그램, UI 스크린샷, 간단한 시연 영상 포함.\n성과 강조: 문제 해결 효과와 프로젝트 가치(시간 단축, 비용 절감 등)를 데이터와 함께 설명.\n팀워크 강조: 각 팀원의 역할과 기여도를 짧게 소개하고 협업 경험을 공유.\nQ&A 대비: 예상 질문(LLM 비용, 데이터 보안, 확장 가능성)에 대한 답변 준비.\n\n	프로젝트 결과를 발표할 자료를 준비하세요.	4	2025-08-18	2025-08-19	\N	2025-07-30	완료	중	3	2	\N
18	모델 학습을 위한 데이터셋 준비	1) 데이터셋 준비 과정:\n공공 데이터 포털과 Kaggle에서 텍스트 데이터셋을 수집하고, 중복된 데이터와 불필요한 특수 문자를 제거했습니다.\npandas를 활용하여 결측값을 처리하고, 데이터의 컬럼 구조를 학습에 적합하게 변환했습니다.\n데이터셋을 학습용(Train), 검증용(Validation), 테스트용(Test)으로 8:1:1 비율로 분할하여 관리했습니다.\n텍스트 데이터를 모델 입력에 맞게 토큰화(BPE 기반 토크나이저)하고 길이 제한을 맞췄습니다.\n\n2) 데이터셋 품질 평가:\n데이터의 대표성(도메인 적합성), 다양성(어휘 분포), 노이즈(오타, 비정상 문장 비율)를 기준으로 평가했습니다.\n토큰화 후 문장 길이 분포를 확인하고, 불필요하게 짧거나 긴 샘플을 필터링했습니다.\n데이터셋 일부를 샘플링해 수동으로 검수하여 품질을 확인했습니다.\n\n\n3) 개선할 점:\n특정 카테고리(예: 감정 데이터의 부정 표현) 샘플 수가 부족하여 데이터 불균형 문제가 있음을 발견했습니다.\n노이즈가 많은 데이터는 정규표현식과 사전 필터링 규칙을 더 세밀하게 적용할 필요가 있습니다.\n도메인 특화 데이터셋을 추가로 확보해 모델의 성능을 높일 계획입니다.\n\n	모델 학습에 적합한 데이터셋을 준비하고, 데이터셋의 품질을 평가합니다.	2	2025-08-04	2025-08-06	2025-07-30	2025-07-30	완료	상	2	2	\N
33	주요 제품 및 서비스 소개	1) 주요 제품:\n2) 서비스 특징:\n3) 시장 내 위치:	회사의 주요 제품 및 서비스를 조사하고, 각 제품의 특징과 시장에서의 위치를 파악하세요.	1	2025-07-16	2025-07-17	\N	2025-07-30	완료	중	3	3	\N
34	회사 역사 및 핵심 가치 학습	1) 배운 점:\n2) 적용 방안:\n3) 질문 사항:	회사의 역사와 핵심 가치를 학습하고, 이를 바탕으로 자신의 업무에 어떻게 적용할 수 있을지 생각해보기	1	2025-07-16	2025-07-18	\N	2025-07-30	완료	상	4	3	\N
35	업무 프로세스 이해	1) 이해한 프로세스:\n2) 자신의 역할:\n3) 추가 학습 필요 사항:	회사의 업무 프로세스를 이해하고, 각 단계에서 자신의 역할을 파악하기	1	2025-07-16	2025-07-19	\N	2025-07-30	완료	상	5	3	\N
36	업무 프로세스 이해	1) 업무 프로세스 단계:\n2) 각 단계의 중요성:\n3) 개선할 수 있는 부분:	회사의 업무 프로세스를 학습하고, 각 단계의 중요성을 파악하세요.	2	2025-07-23	2025-07-26	\N	2025-07-30	완료	상	1	3	\N
37	조직 내 역할과 책임 명확히 하기	1) 나의 역할:\n2) 책임:\n3) 수행 계획:	자신의 역할과 책임을 명확히 하고, 이를 수행하기 위한 계획을 세우세요.	2	2025-07-23	2025-07-25	\N	2025-07-30	완료	상	2	3	\N
38	업무 프로세스 이해	1) 배운 점:\n2) 추가로 알고 싶은 점:\n3) 이해가 어려웠던 부분:	회사의 주요 업무 프로세스를 학습하고, 각 단계의 중요성을 이해합니다.	2	2025-07-23	2025-07-26	\N	2025-07-30	완료	상	3	3	\N
39	부서별 역할과 책임 학습	1) 이해한 부서의 역할:\n2) 부서 간 협업의 중요성:\n3) 질문하고 싶은 점:	각 부서의 역할과 책임을 명확히 이해하고, 부서 간 협업의 중요성을 인식합니다.	2	2025-07-23	2025-07-25	\N	2025-07-30	완료	중	4	3	\N
40	커뮤니케이션 도구 및 플랫폼 사용법 익히기	1) 익힌 도구 및 플랫폼:\n2) 사용 시 유의할 점:\n3) 추가로 배우고 싶은 기능:	회사의 공식 커뮤니케이션 도구와 플랫폼의 사용법을 익히고, 이를 통해 효과적으로 소통하는 방법을 학습합니다.	2	2025-07-23	2025-07-25	\N	2025-07-30	완료	상	5	3	\N
41	구성원 소개 및 네트워킹	1) 만난 사람들:\n2) 배운 점:\n3) 향후 협력 방안:	팀 구성원 및 다른 부서 동료들과의 관계 형성을 위한 네트워킹 활동 참여	2	2025-07-23	2025-07-26	\N	2025-07-30	완료	중	6	3	\N
42	조직문화 워크숍 참여	1) 워크숍에서 배운 점:\n2) 느낀 점:\n3) 적용 방안:	조직문화 워크숍에 참여하여 회사의 문화와 가치에 대해 깊이 이해하기	2	2025-07-23	2025-07-25	\N	2025-07-30	완료	상	7	3	\N
43	동료들과의 관계 형성	1) 관계 형성 활동:\n2) 느낀 점:\n3) 개선할 점:	동료들과의 관계를 형성하기 위한 활동을 계획하고 실행하세요.	3	2025-07-30	2025-08-02	\N	2025-07-30	완료	중	1	3	\N
44	네트워킹 구축	1) 네트워킹 전략:\n2) 실행 결과:\n3) 추가할 점:	조직 내 네트워킹을 구축하기 위한 전략을 수립하고 실행하세요.	3	2025-07-30	2025-08-01	\N	2025-07-30	완료	중	2	3	\N
45	팀워크 활동 참여	1) 팀워크 활동에서 배운 점:\n2) 팀과의 협업에서 개선할 점:	팀원들과 함께 협력하여 작은 프로젝트를 수행하고 결과를 공유합니다.	3	2025-07-30	2025-08-02	\N	2025-07-30	완료	상	3	3	\N
46	멘토와의 1:1 미팅	1) 멘토에게 받은 피드백:\n2) 피드백을 바탕으로 개선할 점:	지정된 멘토와의 미팅을 통해 업무에 대한 피드백과 조언을 받습니다.	3	2025-07-30	2025-07-31	\N	2025-07-30	완료	상	4	3	\N
47	사내 네트워킹 이벤트 참여	1) 네트워킹 이벤트에서 만난 사람들:\n2) 네트워킹을 통해 얻은 인사이트:	사내 네트워킹 이벤트에 참여하여 다양한 부서의 동료들과 관계를 형성합니다.	3	2025-07-30	2025-08-01	\N	2025-07-30	완료	중	5	3	\N
48	업무 목표 설정	1) 설정한 목표:\n2) 달성 계획:\n3) 필요한 지원:	자신의 업무 목표를 설정하고, 이를 달성하기 위한 계획 수립	3	2025-07-30	2025-08-01	\N	2025-07-30	완료	상	6	3	\N
49	성과 측정 방법 이해	1) 이해한 성과 측정 방법:\n2) 목표와의 연계 방안:\n3) 개선할 점:	성과 측정 방법에 대해 학습하고, 자신의 목표와 어떻게 연계할지 이해하기	3	2025-07-30	2025-08-01	\N	2025-07-30	완료	중	7	3	\N
50	조직문화 적응 평가	1) 적응한 부분:\n2) 부족한 부분:\n3) 개선 계획:	조직문화에 얼마나 적응했는지 평가하고, 부족한 부분을 개선할 계획을 세우세요.	4	2025-08-06	2025-08-09	\N	2025-07-30	완료	상	1	3	\N
51	온보딩 프로그램 피드백	1) 프로그램의 장점:\n2) 개선할 점:\n3) 제안 사항:	온보딩 프로그램에 대한 피드백을 작성하고, 개선점을 제안하세요.	4	2025-08-06	2025-08-08	\N	2025-07-30	완료	중	2	3	\N
52	조직 내 역할 및 책임 명확히 하기	1) 자신의 역할:\n2) 책임 사항:\n3) 계획 수립:	조직 내 자신의 역할과 책임을 명확히 하고, 이를 바탕으로 업무 수행 계획 수립	4	2025-08-06	2025-08-09	\N	2025-07-30	완료	상	3	3	\N
53	온보딩 피드백 세션 참여	1) 피드백 내용:\n2) 제안 사항:\n3) 느낀 점:	온보딩 프로그램에 대한 피드백 세션에 참여하여 개선점을 제안	4	2025-08-06	2025-08-07	\N	2025-07-30	완료	중	4	3	\N
\.


--
-- Data for Name: core_taskmanage; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_taskmanage (task_manage_id, title, description, guideline, week, "order", period, priority, curriculum_id) FROM stdin;
14	회사 역사 및 설립 배경 조사	1) 배운 점:\n2) 흥미로웠던 사실:\n3) 추가로 알고 싶은 점:	회사의 설립 배경과 주요 연혁을 조사하고 정리하세요.	1	1	2	상	2
15	조직의 핵심 가치 및 비전 이해	1) 이해한 핵심 가치:\n2) 비전의 중요성:\n3) 적용 방안:	회사의 핵심 가치와 비전을 학습하고, 이를 어떻게 업무에 적용할 수 있을지 생각해보세요.	1	2	2	상	2
16	주요 제품 및 서비스 소개	1) 주요 제품:\n2) 서비스 특징:\n3) 시장 내 위치:	회사의 주요 제품 및 서비스를 조사하고, 각 제품의 특징과 시장에서의 위치를 파악하세요.	1	3	1	중	2
17	회사 역사 및 핵심 가치 학습	1) 배운 점:\n2) 적용 방안:\n3) 질문 사항:	회사의 역사와 핵심 가치를 학습하고, 이를 바탕으로 자신의 업무에 어떻게 적용할 수 있을지 생각해보기	1	4	2	상	2
18	업무 프로세스 이해	1) 이해한 프로세스:\n2) 자신의 역할:\n3) 추가 학습 필요 사항:	회사의 업무 프로세스를 이해하고, 각 단계에서 자신의 역할을 파악하기	1	5	3	상	2
19	업무 프로세스 이해	1) 업무 프로세스 단계:\n2) 각 단계의 중요성:\n3) 개선할 수 있는 부분:	회사의 업무 프로세스를 학습하고, 각 단계의 중요성을 파악하세요.	2	1	3	상	2
20	조직 내 역할과 책임 명확히 하기	1) 나의 역할:\n2) 책임:\n3) 수행 계획:	자신의 역할과 책임을 명확히 하고, 이를 수행하기 위한 계획을 세우세요.	2	2	2	상	2
21	업무 프로세스 이해	1) 배운 점:\n2) 추가로 알고 싶은 점:\n3) 이해가 어려웠던 부분:	회사의 주요 업무 프로세스를 학습하고, 각 단계의 중요성을 이해합니다.	2	3	3	상	2
22	부서별 역할과 책임 학습	1) 이해한 부서의 역할:\n2) 부서 간 협업의 중요성:\n3) 질문하고 싶은 점:	각 부서의 역할과 책임을 명확히 이해하고, 부서 간 협업의 중요성을 인식합니다.	2	4	2	중	2
23	커뮤니케이션 도구 및 플랫폼 사용법 익히기	1) 익힌 도구 및 플랫폼:\n2) 사용 시 유의할 점:\n3) 추가로 배우고 싶은 기능:	회사의 공식 커뮤니케이션 도구와 플랫폼의 사용법을 익히고, 이를 통해 효과적으로 소통하는 방법을 학습합니다.	2	5	2	상	2
24	구성원 소개 및 네트워킹	1) 만난 사람들:\n2) 배운 점:\n3) 향후 협력 방안:	팀 구성원 및 다른 부서 동료들과의 관계 형성을 위한 네트워킹 활동 참여	2	6	3	중	2
25	조직문화 워크숍 참여	1) 워크숍에서 배운 점:\n2) 느낀 점:\n3) 적용 방안:	조직문화 워크숍에 참여하여 회사의 문화와 가치에 대해 깊이 이해하기	2	7	2	상	2
26	동료들과의 관계 형성	1) 관계 형성 활동:\n2) 느낀 점:\n3) 개선할 점:	동료들과의 관계를 형성하기 위한 활동을 계획하고 실행하세요.	3	1	3	중	2
27	네트워킹 구축	1) 네트워킹 전략:\n2) 실행 결과:\n3) 추가할 점:	조직 내 네트워킹을 구축하기 위한 전략을 수립하고 실행하세요.	3	2	2	중	2
28	팀워크 활동 참여	1) 팀워크 활동에서 배운 점:\n2) 팀과의 협업에서 개선할 점:	팀원들과 함께 협력하여 작은 프로젝트를 수행하고 결과를 공유합니다.	3	3	3	상	2
29	멘토와의 1:1 미팅	1) 멘토에게 받은 피드백:\n2) 피드백을 바탕으로 개선할 점:	지정된 멘토와의 미팅을 통해 업무에 대한 피드백과 조언을 받습니다.	3	4	1	상	2
30	사내 네트워킹 이벤트 참여	1) 네트워킹 이벤트에서 만난 사람들:\n2) 네트워킹을 통해 얻은 인사이트:	사내 네트워킹 이벤트에 참여하여 다양한 부서의 동료들과 관계를 형성합니다.	3	5	2	중	2
31	업무 목표 설정	1) 설정한 목표:\n2) 달성 계획:\n3) 필요한 지원:	자신의 업무 목표를 설정하고, 이를 달성하기 위한 계획 수립	3	6	2	상	2
32	성과 측정 방법 이해	1) 이해한 성과 측정 방법:\n2) 목표와의 연계 방안:\n3) 개선할 점:	성과 측정 방법에 대해 학습하고, 자신의 목표와 어떻게 연계할지 이해하기	3	7	2	중	2
33	조직문화 적응 평가	1) 적응한 부분:\n2) 부족한 부분:\n3) 개선 계획:	조직문화에 얼마나 적응했는지 평가하고, 부족한 부분을 개선할 계획을 세우세요.	4	1	3	상	2
34	온보딩 프로그램 피드백	1) 프로그램의 장점:\n2) 개선할 점:\n3) 제안 사항:	온보딩 프로그램에 대한 피드백을 작성하고, 개선점을 제안하세요.	4	2	2	중	2
35	조직 내 역할 및 책임 명확히 하기	1) 자신의 역할:\n2) 책임 사항:\n3) 계획 수립:	조직 내 자신의 역할과 책임을 명확히 하고, 이를 바탕으로 업무 수행 계획 수립	4	3	3	상	2
36	온보딩 피드백 세션 참여	1) 피드백 내용:\n2) 제안 사항:\n3) 느낀 점:	온보딩 프로그램에 대한 피드백 세션에 참여하여 개선점을 제안	4	4	1	중	2
37	프로그램 평가 참여	1) 프로그램 평가:\n2) 개선할 점:\n3) 긍정적인 점:	온보딩 프로그램 전체에 대한 평가에 참여하여 자신의 경험을 공유	4	5	1	중	2
\.


--
-- Data for Name: core_user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_user (is_superuser, user_id, employee_number, is_admin, tag, role, join_date, "position", job_part, email, password, last_name, first_name, last_login, profile_image, is_active, is_staff, company_id, department_id) FROM stdin;
t	1	1000	t	\N		\N			admin@admin.com	pbkdf2_sha256$1000000$6LwBYRIJ9FssX0xdOvIJs7$/PSO2dmvhB1hqzEcUQRUVTbbjqujOhIXYhxvg5+V5c8=	이	창호	2025-07-28 20:09:57.822363+09		t	t	\N	\N
f	3	1101	f	\N	mentee	2025-02-07	사원	백엔드 개발자	tkddlr@skn11.com	pbkdf2_sha256$1000000$iUeY1TMBbYOBk4bDdfA68o$M/E0XiVhJGf83FMAmZkR1q/VI/WBq+lii+nP1Uxq4ao=	김	상익	2025-07-28 20:12:43.158154+09		t	f	111-11-11111	2
f	4	1102	f	\N	mentee	2025-02-07	사원	AI엔지니어	tjdwl@skn11.com	pbkdf2_sha256$1000000$AvuFeNEfXOXQAC2N2o8yqW$HjzNv+sX5YEVbTiq/t3aO/xZ7kT9kki3FnKWRvV6bIQ=	김	성지	2025-07-28 20:12:44.658728+09		t	f	111-11-11111	3
f	5	1103	f	\N	mentee	2025-02-07	사원	선행 연구	dlrms@skn11.com	pbkdf2_sha256$1000000$FUuUK6sALfCPdEITkK1W3A$xENWtaOcBXUnFq9GLPmc2+S8KsWviu4njZ2CRdNpOFo=	이	근	2025-07-28 20:12:46.37254+09		t	f	111-11-11111	4
f	6	1104	f	\N	mentee	2025-02-07	사원	멘탈케어	gksthf@skn11.com	pbkdf2_sha256$1000000$QKKzF9toGYqClOC6ByneSD$htczukvCzekofMVBJ2j68qXFULWgkTUE5/sdKFnuClQ=	김	한솔	2025-07-28 20:12:48.076449+09		t	f	111-11-11111	5
f	7	1105	f	\N	mentee	2025-02-07	사원	프론트엔드 개발자	tjddlf@skn11.com	pbkdf2_sha256$1000000$IMf990NuOhIQJFA19EeRxn$/XmpO12HayGYS2nDQcqse1LC+B8Bqaded/rIL9ChA/Y=	방	성일	2025-07-28 20:12:49.802417+09		t	f	111-11-11111	6
f	8	1106	f	\N	mentee	2025-02-07	사원	AI엔지니어	junhee@skn11.com	pbkdf2_sha256$1000000$d1SrlXQqquhqYGYBtAboOh$GkEQ+AEKZOz5+b8Wsup6pNfrUdYKRZP2ihO0FUKPK18=	신	준희	2025-07-28 20:12:51.532614+09		t	f	111-11-11111	7
f	10	1108	f	\N	mentee	2025-02-07	사원	사업기획	codms@skn11.com	pbkdf2_sha256$1000000$fjvcKMUHrIIKh6IYcuYq8I$saLnW+oN8YTR4DYZFRfk+JK8fnm8zgD16BNGg3imlqo=	이	채은	2025-07-28 20:12:54.956607+09		t	f	111-11-11111	5
f	11	1109	f	\N	mentee	2025-02-07	사원	프론트엔드 개발자	alsgh@skn11.com	pbkdf2_sha256$1000000$k1OcACoNlhWLHuCMau7HZo$a8kRl0hSpcvneh2uzXUaiBnX0BEXO9iV82Z5JD5dV2s=	정	민호	2025-07-28 20:12:56.656152+09		t	f	111-11-11111	7
f	12	1110	f	\N	mentee	2025-02-07	사원	마케팅	dbqls@skn11.com	pbkdf2_sha256$1000000$MrEf0c3QQzmeG7umpVQ0Sp$5WCkoOxzn2JwHAtF7wLOqusIlOEc25WGo1u0mzUwvnU=	전	유빈	2025-07-28 20:12:58.385859+09		t	f	111-11-11111	5
f	13	1111	f	\N	mentor	2025-02-07	팀장	PM	dkdlatjsh@skn11.com	pbkdf2_sha256$1000000$eJFJmILsgHwmLNTVNA2lgX$9fkThMz45SotsiumbGovNBvF4B1aJMv0SCEzPrnBgk4=	이	선호	2025-07-28 20:13:00.111973+09		t	f	111-11-11111	7
f	14	1112	f	\N	mentee	2025-02-07	사원	이미지 매이커	gusals@skn11.com	pbkdf2_sha256$1000000$VRUX7c0ZoSW74INND7KzHG$QUn6FZEAxMl6Nx4lZ03AtqswiSeJzA90DUrBX+Ik7Gs=	이	현민	2025-07-28 20:13:01.803599+09		t	f	111-11-11111	2
f	16	1114	f	\N	mentee	2025-02-07	사원	AI엔지니어	gardenkim@skn11.com	pbkdf2_sha256$1000000$M93aknOMzsSGZqIAHf6uKK$r4OhNF2RS39cZoqhbk7N6dRdWrKaL69YwhfQuuLtFxU=	김	정원	2025-07-28 20:13:05.331307+09		t	f	111-11-11111	3
f	17	1115	f	\N	mentee	2025-02-07	사원	백엔드 개발자	qorwkdal@skn11.com	pbkdf2_sha256$1000000$7m8mIAfBFKR2PkA3pz0qV2$LnIHJEMQS2SzkEnG4qmGvCUvjlG8dvgP/kaFl/vI3GE=	백	미송	2025-07-28 20:13:07.081615+09		t	f	111-11-11111	7
f	18	1116	f	\N	mentee	2025-02-07	사원	AI엔지니어	wnsghghkd@skn11.com	pbkdf2_sha256$1000000$IDzhv0GI8WCoDKnlnTfgom$3dUetePXxGuItEcTTD7R07SBWBnM5N53auPMJTy4gvk=	황	준호	2025-07-28 20:13:08.830867+09		t	f	111-11-11111	7
f	19	1117	f	\N	mentee	2025-02-07	사원	프론트엔드 개발자	gudwngudwn@skn11.com	pbkdf2_sha256$1000000$KCb5VNfKcDXMlSvIHs7PsA$FD+0+Hupxdgn3q2RvkGC4Dtf6Pyjl2Rw9l828MhrLN4=	김	형주	2025-07-28 20:13:10.561935+09		t	f	111-11-11111	2
f	20	1118	f	\N	mentee	2025-02-07	사원	AI엔지니어	skchfl@skn11.com	pbkdf2_sha256$1000000$3OYtuqWXbb14BhAkpgLiVr$ratxWoVfZ1hUvM6zR8W7rh8Vz6HVgWYhyqDm/EHLaes=	나	지윤	2025-07-28 20:13:12.387276+09		t	f	111-11-11111	2
f	21	1119	f	\N	mentee	2025-02-07	사원	AI엔지니어	fldhspfqotl@skn11.com	pbkdf2_sha256$1000000$ssylNbdXrUVHNpa0ZcvGIb$eundBHlvXd78c1w4VYaOX3GkIkjIXX4QMgpnytyVQYI=	배	정수	2025-07-28 20:13:14.18544+09		t	f	111-11-11111	6
f	22	1120	f	\N	mentor	2025-02-07	팀장	업무관리	dbsgk@skn11.com	pbkdf2_sha256$1000000$Mmoypxhh6n9bduoOeOLj5Q$yaYv3tT/g9Y1k1f0yCsl94lR4wj0ZHkLaXU8bC4owZI=	이	혜성	2025-07-28 20:13:15.95114+09		t	f	111-11-11111	5
f	23	1121	f	\N	mentor	2025-02-07	팀장	AI엔지니어	guseowkehdck@skn11.com	pbkdf2_sha256$1000000$3xtlNF4LXrtXfGfA3tChEM$xbfKgEhRW8E0sPlrdHRG6ZDEdUOnfGbZ00UHi3bG24o=	이	현대	2025-07-28 20:13:17.659537+09		t	f	111-11-11111	2
f	24	1122	f	\N	mentee	2025-02-07	사원	백엔드 개발자	dlalswjd@skn11.com	pbkdf2_sha256$1000000$7poy3FzKEL9Dm8FscPMh3x$6VzJkLt7Ul0AYUD4FVmBjfoyHxfeDXTk/sD4uFhWJHA=	이	민정	2025-07-28 20:13:19.364976+09		t	f	111-11-11111	6
f	25	1123	f	\N	mentee	2025-02-07	사원	고객관리	dhwjdgus@skn11.com	pbkdf2_sha256$1000000$E5Bl8IvmnqNc6XfM5MEkNl$+ZFJABaaJ5eWcxjwsyweVyo4oAu6o8Z5Qfg8Tw/lyrc=	오	정현	2025-07-28 20:13:21.048531+09		t	f	111-11-11111	5
f	26	1124	f	\N	mentee	2025-02-07	사원	선행 연구	dkswhdgus@skn11.com	pbkdf2_sha256$1000000$9qaBhdvM1OPwOiGjorlHZR$nBySgHbBBkg2FKlgu9wwPi9wJi+HRkgtXwKMjfcT1vo=	안	종현	2025-07-28 20:13:22.713638+09		t	f	111-11-11111	4
f	27	1125	f	\N	mentee	2025-02-07	사원	제품 개발	gusdnr@skn11.com	pbkdf2_sha256$1000000$X3WmLbxmbWWBuvJ6cDfEsB$uIrJ+HNJEGtdZ6lA38pKUEBGcnWXtfZtL/zmHUJ+AtE=	정	현욱	2025-07-28 20:13:24.395399+09		t	f	111-11-11111	4
f	28	1126	f	\N	mentee	2025-02-07	사원	백엔드 개발자	wkdtnakrrjffl@skn11.com	pbkdf2_sha256$1000000$ZLQ97eoggCImIHtG4x4Qw9$m9puOsFtxgmVw2JL+JAyq2NmlUaVeHj9KSZ91+tw7xo=	김	장수	2025-07-28 20:13:26.077298+09		t	f	111-11-11111	3
f	29	1127	f	\N	mentor	2025-02-07	팀장	풀스택 개발자	uugyeong27@skn11.com	pbkdf2_sha256$1000000$BHGBtpBqkptBeQzXZQjEka$k+16ua/FqwNOI0bM4/qjydguN53hBj+AnjlgshgGlrI=	현	유경	2025-07-28 20:13:27.769645+09		t	f	111-11-11111	3
f	30	1128	f	\N	mentee	2025-02-10	팀장	PM	tjddnr93@skn11.com	pbkdf2_sha256$1000000$iRm92ovTXaCAXRuLb3fRLE$kHfzq/Z3MvE5w3RlIY67rsf6Iwu1GuorAwQuY+AstrI=	홍	성욱	2025-07-28 20:13:29.428825+09		t	f	111-11-11111	4
f	31	1129	f	\N	mentee	2025-02-07	사원	제품 개발	qkrtoa@skn11.com	pbkdf2_sha256$1000000$6Zxiljc9Bz9dE1tzrfyQcV$ehPdI1mKLhNVUKl7bw/IqHVGQ5uxvo0mjxEnC9yUJIk=	박	샘	2025-07-28 20:13:31.110075+09		f	f	111-11-11111	4
f	15	1113	f	\N	mentee	2025-02-07	사원	AI엔지니어	tlswlstmf@skn11.com	pbkdf2_sha256$1000000$1u8zNeqlDfGZw1vg3vTyB4$m3KE4leLe/1mX9ytpz9gFfsI7aeJcqiuDjUiMInT0V8=	신	진슬	2025-07-30 03:24:04.628928+09		t	f	111-11-11111	6
f	9	1107	f	\N	mentor	2025-02-07	팀장	PM	a99086800@gmail.com	pbkdf2_sha256$1000000$qNzHog12rvaAuYuG68FHMK$OjaCGm+Yp16mTsjAqEEZp8DbxJ9TZnm5B8L+00zRDBY=	성	호진	2025-07-30 09:39:58.554238+09		t	f	111-11-11111	6
f	32	2001	f	#친구	mentee	2025-07-30	사원	인사관리	qkrrmsgh@skn11.com	$2b$12$63rnJoSD8PR.6pPAKxd.kOIUxHdqL5oP3.jA5iiQfYCrnC.EmJ7TK	박	근호	2025-07-30 10:17:56.901475+09	\N	t	f	111-11-11111	8
f	2	1000	t	\N	mentor	2025-07-28	팀장	LLM 개발	admin@example.com	pbkdf2_sha256$1000000$t9UKTfFkh5jhC0RXAOnYZv$ZpkCap6ZxhZvdhXBHDQf409Au4gQHOYw7VcDc8J6C3Q=	이	창호	2025-07-30 10:18:36.724982+09		t	f	111-11-11111	8
\.


--
-- Data for Name: core_user_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- Data for Name: core_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.core_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
1	2025-07-28 20:10:59.131327+09	111-11-11111	EZFLOW	1	[{"added": {}}]	6	1
2	2025-07-28 20:11:12.53667+09	1	LLM 개발	1	[{"added": {}}]	13	1
3	2025-07-28 20:11:40.795249+09	2	창호 이	1	[{"added": {}}]	9	1
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	contenttypes	contenttype
5	sessions	session
6	core	company
7	core	emailconfig
8	core	mentorship
9	core	user
10	core	alarm
11	core	chatsession
12	core	chatmessage
13	core	department
14	core	curriculum
15	core	docs
16	core	taskassign
17	core	memo
18	core	taskmanage
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2025-07-30 02:04:25.257198+09
2	contenttypes	0002_remove_content_type_name	2025-07-30 02:04:25.263233+09
3	auth	0001_initial	2025-07-30 02:04:25.288197+09
4	auth	0002_alter_permission_name_max_length	2025-07-30 02:04:25.292213+09
5	auth	0003_alter_user_email_max_length	2025-07-30 02:04:25.295219+09
6	auth	0004_alter_user_username_opts	2025-07-30 02:04:25.297216+09
7	auth	0005_alter_user_last_login_null	2025-07-30 02:04:25.301196+09
8	auth	0006_require_contenttypes_0002	2025-07-30 02:04:25.302199+09
9	auth	0007_alter_validators_add_error_messages	2025-07-30 02:04:25.305214+09
10	auth	0008_alter_user_username_max_length	2025-07-30 02:04:25.308213+09
11	auth	0009_alter_user_last_name_max_length	2025-07-30 02:04:25.311195+09
12	auth	0010_alter_group_name_max_length	2025-07-30 02:04:25.316214+09
13	auth	0011_update_proxy_permissions	2025-07-30 02:04:25.320202+09
14	auth	0012_alter_user_first_name_max_length	2025-07-30 02:04:25.323197+09
15	core	0001_initial	2025-07-30 02:04:25.459721+09
16	admin	0001_initial	2025-07-30 02:04:25.480377+09
17	admin	0002_logentry_remove_auto_add	2025-07-30 02:04:25.569443+09
18	admin	0003_logentry_add_action_flag_choices	2025-07-30 02:04:25.576718+09
19	sessions	0001_initial	2025-07-30 02:04:25.583714+09
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
mu0hor43tph6hvmopbitfz8r54rd8jzd	.eJytU91v2jAc_F_8OojsfBicp0GhUxCFtiqFokqRk9jEkMRR4pRCxf8-m6-1m_YwaVFefHe-O_-cfID1VoVKblgBfMB2ozT6EYupGAWzfYAmIqiD4tGLbwIcbMrF882IWFq0T-aBEaXTp812Onhx7wb93tJGKZ1vmxebqEBsxXKRboO1fJ_sZ_vJvocm696OP1iLN_IwjMQ9GjvrvRjeLvGmX3mTVSxJMB0sn4NxULvT_BHPIGiBpmZVmFBFgf8BuKhqFRY0Z7rra5Ngp_vaxCR2tTCjn6kYOUiDLKci0wAlBHZxF8LvK4NYscw1u5ZRWNJKacH9nV6XshZKyOJk7kCofTrUOypFYVoYcxvaXhvabdjRhKIr4BdNlrVAJTND56xQsjpml5ncMRYWTR6xCvgIwU4LiDqkSS50CKdZzY5A3ZSsMie9gmUluchYKHK6Mq6XSYgE-KQFEmZ6m6gjgltAn6ikxe64BAih9vHVz2U0mVyZ0HP9TtvuPtnQR66uZdle13HhN0h8aGZuKsZKvOlgVTXniopyfq33K99cy6c25wsYLm_H0zkwwjquRHma6mlO_9b9jy5nscm97Ps99O9-h8N_MAhpo9Lweh2AgC9YRGP9MxkiWdNiJfXHVqhKRJaRWGe2tu5kwrL-WfvFIKV1qndjZiOXR5RAbhOXd1wvQjjysAc5jQgljhMzm3Mbs5hHjHDXcSKMvYR3OHKIh8HhJ6zjPBo:1ugMTC:AzJP5hR0zvdNcpLOJRob2K6E5EBRoKi1i3r-azxXfP0	2025-08-11 20:56:42.941034+09
\.


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 72, true);


--
-- Name: core_alarm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_alarm_id_seq', 32, true);


--
-- Name: core_chatmessage_message_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_chatmessage_message_id_seq', 81, true);


--
-- Name: core_chatsession_session_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_chatsession_session_id_seq', 10, true);


--
-- Name: core_curriculum_curriculum_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_curriculum_curriculum_id_seq', 2, true);


--
-- Name: core_department_department_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_department_department_id_seq', 8, true);


--
-- Name: core_docs_docs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_docs_docs_id_seq', 12, true);


--
-- Name: core_emailconfig_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_emailconfig_id_seq', 1, true);


--
-- Name: core_memo_memo_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_memo_memo_id_seq', 27, true);


--
-- Name: core_mentorship_mentorship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_mentorship_mentorship_id_seq', 3, true);


--
-- Name: core_taskassign_task_assign_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_taskassign_task_assign_id_seq', 54, true);


--
-- Name: core_taskmanage_task_manage_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_taskmanage_task_manage_id_seq', 37, true);


--
-- Name: core_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_user_groups_id_seq', 1, false);


--
-- Name: core_user_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_user_user_id_seq', 32, true);


--
-- Name: core_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.core_user_user_permissions_id_seq', 1, false);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 3, true);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 18, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 19, true);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: core_alarm core_alarm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_alarm
    ADD CONSTRAINT core_alarm_pkey PRIMARY KEY (id);


--
-- Name: core_chatmessage core_chatmessage_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_chatmessage
    ADD CONSTRAINT core_chatmessage_pkey PRIMARY KEY (message_id);


--
-- Name: core_chatsession core_chatsession_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_chatsession
    ADD CONSTRAINT core_chatsession_pkey PRIMARY KEY (session_id);


--
-- Name: core_company core_company_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_company
    ADD CONSTRAINT core_company_pkey PRIMARY KEY (company_id);


--
-- Name: core_curriculum core_curriculum_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_curriculum
    ADD CONSTRAINT core_curriculum_pkey PRIMARY KEY (curriculum_id);


--
-- Name: core_department core_department_department_name_company_id_0bf1d2e1_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_department
    ADD CONSTRAINT core_department_department_name_company_id_0bf1d2e1_uniq UNIQUE (department_name, company_id);


--
-- Name: core_department core_department_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_department
    ADD CONSTRAINT core_department_pkey PRIMARY KEY (department_id);


--
-- Name: core_docs core_docs_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_docs
    ADD CONSTRAINT core_docs_pkey PRIMARY KEY (docs_id);


--
-- Name: core_emailconfig core_emailconfig_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_emailconfig
    ADD CONSTRAINT core_emailconfig_email_key UNIQUE (email);


--
-- Name: core_emailconfig core_emailconfig_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_emailconfig
    ADD CONSTRAINT core_emailconfig_pkey PRIMARY KEY (id);


--
-- Name: core_memo core_memo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_memo
    ADD CONSTRAINT core_memo_pkey PRIMARY KEY (memo_id);


--
-- Name: core_mentorship core_mentorship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_mentorship
    ADD CONSTRAINT core_mentorship_pkey PRIMARY KEY (mentorship_id);


--
-- Name: core_taskassign core_taskassign_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_taskassign
    ADD CONSTRAINT core_taskassign_pkey PRIMARY KEY (task_assign_id);


--
-- Name: core_taskmanage core_taskmanage_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_taskmanage
    ADD CONSTRAINT core_taskmanage_pkey PRIMARY KEY (task_manage_id);


--
-- Name: core_user core_user_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_user
    ADD CONSTRAINT core_user_email_key UNIQUE (email);


--
-- Name: core_user_groups core_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_user_groups
    ADD CONSTRAINT core_user_groups_pkey PRIMARY KEY (id);


--
-- Name: core_user_groups core_user_groups_user_id_group_id_c82fcad1_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_user_groups
    ADD CONSTRAINT core_user_groups_user_id_group_id_c82fcad1_uniq UNIQUE (user_id, group_id);


--
-- Name: core_user core_user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_user
    ADD CONSTRAINT core_user_pkey PRIMARY KEY (user_id);


--
-- Name: core_user_user_permissions core_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_user_user_permissions
    ADD CONSTRAINT core_user_user_permissions_pkey PRIMARY KEY (id);


--
-- Name: core_user_user_permissions core_user_user_permissions_user_id_permission_id_73ea0daa_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_user_user_permissions
    ADD CONSTRAINT core_user_user_permissions_user_id_permission_id_73ea0daa_uniq UNIQUE (user_id, permission_id);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: core_alarm_user_id_e9532f8a; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_alarm_user_id_e9532f8a ON public.core_alarm USING btree (user_id);


--
-- Name: core_chatmessage_session_id_e3c386aa; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_chatmessage_session_id_e3c386aa ON public.core_chatmessage USING btree (session_id);


--
-- Name: core_chatsession_user_id_1929cfbb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_chatsession_user_id_1929cfbb ON public.core_chatsession USING btree (user_id);


--
-- Name: core_company_company_id_926e360b_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_company_company_id_926e360b_like ON public.core_company USING btree (company_id varchar_pattern_ops);


--
-- Name: core_curriculum_department_id_5d8af7b3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_curriculum_department_id_5d8af7b3 ON public.core_curriculum USING btree (department_id);


--
-- Name: core_department_company_id_347fca8c; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_department_company_id_347fca8c ON public.core_department USING btree (company_id);


--
-- Name: core_department_company_id_347fca8c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_department_company_id_347fca8c_like ON public.core_department USING btree (company_id varchar_pattern_ops);


--
-- Name: core_docs_department_id_5a02f79e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_docs_department_id_5a02f79e ON public.core_docs USING btree (department_id);


--
-- Name: core_emailconfig_email_d3039d1c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_emailconfig_email_d3039d1c_like ON public.core_emailconfig USING btree (email varchar_pattern_ops);


--
-- Name: core_memo_task_assign_id_5d983662; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_memo_task_assign_id_5d983662 ON public.core_memo USING btree (task_assign_id);


--
-- Name: core_memo_user_id_c9f22d42; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_memo_user_id_c9f22d42 ON public.core_memo USING btree (user_id);


--
-- Name: core_taskassign_mentorship_id_id_5460d2bc; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_taskassign_mentorship_id_id_5460d2bc ON public.core_taskassign USING btree (mentorship_id_id);


--
-- Name: core_taskassign_parent_id_e5e25a72; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_taskassign_parent_id_e5e25a72 ON public.core_taskassign USING btree (parent_id);


--
-- Name: core_taskmanage_curriculum_id_189ed120; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_taskmanage_curriculum_id_189ed120 ON public.core_taskmanage USING btree (curriculum_id);


--
-- Name: core_user_company_id_2dbe4115; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_user_company_id_2dbe4115 ON public.core_user USING btree (company_id);


--
-- Name: core_user_company_id_2dbe4115_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_user_company_id_2dbe4115_like ON public.core_user USING btree (company_id varchar_pattern_ops);


--
-- Name: core_user_department_id_172c32d3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_user_department_id_172c32d3 ON public.core_user USING btree (department_id);


--
-- Name: core_user_email_92a71487_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_user_email_92a71487_like ON public.core_user USING btree (email varchar_pattern_ops);


--
-- Name: core_user_groups_group_id_fe8c697f; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_user_groups_group_id_fe8c697f ON public.core_user_groups USING btree (group_id);


--
-- Name: core_user_groups_user_id_70b4d9b8; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_user_groups_user_id_70b4d9b8 ON public.core_user_groups USING btree (user_id);


--
-- Name: core_user_user_permissions_permission_id_35ccf601; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_user_user_permissions_permission_id_35ccf601 ON public.core_user_user_permissions USING btree (permission_id);


--
-- Name: core_user_user_permissions_user_id_085123d3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX core_user_user_permissions_user_id_085123d3 ON public.core_user_user_permissions USING btree (user_id);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_alarm core_alarm_user_id_e9532f8a_fk_core_user_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_alarm
    ADD CONSTRAINT core_alarm_user_id_e9532f8a_fk_core_user_user_id FOREIGN KEY (user_id) REFERENCES public.core_user(user_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_chatmessage core_chatmessage_session_id_e3c386aa_fk_core_chat; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_chatmessage
    ADD CONSTRAINT core_chatmessage_session_id_e3c386aa_fk_core_chat FOREIGN KEY (session_id) REFERENCES public.core_chatsession(session_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_chatsession core_chatsession_user_id_1929cfbb_fk_core_user_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_chatsession
    ADD CONSTRAINT core_chatsession_user_id_1929cfbb_fk_core_user_user_id FOREIGN KEY (user_id) REFERENCES public.core_user(user_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_curriculum core_curriculum_department_id_5d8af7b3_fk_core_depa; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_curriculum
    ADD CONSTRAINT core_curriculum_department_id_5d8af7b3_fk_core_depa FOREIGN KEY (department_id) REFERENCES public.core_department(department_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_department core_department_company_id_347fca8c_fk_core_company_company_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_department
    ADD CONSTRAINT core_department_company_id_347fca8c_fk_core_company_company_id FOREIGN KEY (company_id) REFERENCES public.core_company(company_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_docs core_docs_department_id_5a02f79e_fk_core_depa; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_docs
    ADD CONSTRAINT core_docs_department_id_5a02f79e_fk_core_depa FOREIGN KEY (department_id) REFERENCES public.core_department(department_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_memo core_memo_task_assign_id_5d983662_fk_core_task; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_memo
    ADD CONSTRAINT core_memo_task_assign_id_5d983662_fk_core_task FOREIGN KEY (task_assign_id) REFERENCES public.core_taskassign(task_assign_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_memo core_memo_user_id_c9f22d42_fk_core_user_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_memo
    ADD CONSTRAINT core_memo_user_id_c9f22d42_fk_core_user_user_id FOREIGN KEY (user_id) REFERENCES public.core_user(user_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_taskassign core_taskassign_mentorship_id_id_5460d2bc_fk_core_ment; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_taskassign
    ADD CONSTRAINT core_taskassign_mentorship_id_id_5460d2bc_fk_core_ment FOREIGN KEY (mentorship_id_id) REFERENCES public.core_mentorship(mentorship_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_taskassign core_taskassign_parent_id_e5e25a72_fk_core_task; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_taskassign
    ADD CONSTRAINT core_taskassign_parent_id_e5e25a72_fk_core_task FOREIGN KEY (parent_id) REFERENCES public.core_taskassign(task_assign_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_taskmanage core_taskmanage_curriculum_id_189ed120_fk_core_curr; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_taskmanage
    ADD CONSTRAINT core_taskmanage_curriculum_id_189ed120_fk_core_curr FOREIGN KEY (curriculum_id) REFERENCES public.core_curriculum(curriculum_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_user core_user_company_id_2dbe4115_fk_core_company_company_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_user
    ADD CONSTRAINT core_user_company_id_2dbe4115_fk_core_company_company_id FOREIGN KEY (company_id) REFERENCES public.core_company(company_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_user core_user_department_id_172c32d3_fk_core_depa; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_user
    ADD CONSTRAINT core_user_department_id_172c32d3_fk_core_depa FOREIGN KEY (department_id) REFERENCES public.core_department(department_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_user_groups core_user_groups_group_id_fe8c697f_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_user_groups
    ADD CONSTRAINT core_user_groups_group_id_fe8c697f_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_user_groups core_user_groups_user_id_70b4d9b8_fk_core_user_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_user_groups
    ADD CONSTRAINT core_user_groups_user_id_70b4d9b8_fk_core_user_user_id FOREIGN KEY (user_id) REFERENCES public.core_user(user_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_user_user_permissions core_user_user_permi_permission_id_35ccf601_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_user_user_permissions
    ADD CONSTRAINT core_user_user_permi_permission_id_35ccf601_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: core_user_user_permissions core_user_user_permi_user_id_085123d3_fk_core_user; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.core_user_user_permissions
    ADD CONSTRAINT core_user_user_permi_user_id_085123d3_fk_core_user FOREIGN KEY (user_id) REFERENCES public.core_user(user_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_core_user_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_core_user_user_id FOREIGN KEY (user_id) REFERENCES public.core_user(user_id) DEFERRABLE INITIALLY DEFERRED;


--
-- PostgreSQL database dump complete
--

